@page "/register"
@inject HttpClient Http
@inject NavigationManager Navigation

<PageTitle>Rejestracja</PageTitle>

<div class="auth-form-container">
    <div class="auth-card elegant-card">
        <h3 class="auth-title">Utwórz konto</h3>

        <EditForm Model="@RegisterModel" OnValidSubmit="HandleRegister">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="input-with-icon mb-3">
                <i class="bi bi-person-lines-fill"></i>
                <InputText class="form-control icon-input" @bind-Value="RegisterModel.ImieNazwisko" placeholder="Imię i nazwisko" />
            </div>

            <div class="input-with-icon mb-3">
                <i class="bi bi-person-fill"></i>
                <InputText class="form-control icon-input" @bind-Value="RegisterModel.Login" placeholder="Login" />
            </div>

            <div class="input-with-icon mb-3">
                <i class="bi bi-envelope-fill"></i>
                <InputText class="form-control icon-input" @bind-Value="RegisterModel.Email" type="email" placeholder="Adres email" />
            </div>

            <div class="input-icon-row mb-4">
                <div class="input-with-icon">
                    <i class="bi bi-lock-fill"></i>
                    <input
                        @ref="RegisterPasswordInput"
                        class="form-control icon-input no-right-radius"
                        @bind="RegisterModel.Password"
                        placeholder="Hasło"
                        type="@RegisterPasswordInputType" />
                </div>
                <button type="button" class="eye-button" @onclick="ToggleRegisterPasswordVisibility">
                    <i class="bi @(ShowRegisterPassword ? "bi-eye-slash-fill" : "bi-eye-fill")"></i>
                </button>
            </div>

            @if (!string.IsNullOrEmpty(ErrorMessage))
            {
                <div class="alert alert-danger">@ErrorMessage</div>
            }

            <button type="submit" class="btn btn-primary login-button">Zarejestruj</button>
        </EditForm>

        <div class="text-center mt-3">
            <small>Masz już konto? <a href="/login">Zaloguj się</a></small>
        </div>
    </div>
</div>

@code {
    private RegisterRequest RegisterModel = new();
    private string? ErrorMessage;
    private ElementReference RegisterPasswordInput;
    private bool ShowRegisterPassword;
    private string RegisterPasswordInputType => ShowRegisterPassword ? "text" : "password";

    
    private void ToggleRegisterPasswordVisibility()
    {
        ShowRegisterPassword = !ShowRegisterPassword;
    }
    
    private async Task HandleRegister()
    {
        RegisterModel.TypKonta = "gosc"; // Zawsze przypisujemy "gosc"

        try
        {
            var response = await Http.PostAsJsonAsync("/api/auth/register", RegisterModel);
            if (response.IsSuccessStatusCode)
            {
                Navigation.NavigateTo("/login");
            }
            else
            {
                var result = await response.Content.ReadFromJsonAsync<Dictionary<string, string>>();
                ErrorMessage = result?["message"] ?? "Wystąpił błąd.";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Błąd rejestracji: {ex.Message}";
        }
    }

    public class RegisterRequest
    {
        [Required(ErrorMessage = "Imię i nazwisko jest wymagane")]
        public string ImieNazwisko { get; set; } = string.Empty;

        [Required(ErrorMessage = "Login jest wymagany")]
        public string Login { get; set; } = string.Empty;

        [Required(ErrorMessage = "Hasło jest wymagane")]
        public string Password { get; set; } = string.Empty;

        [Required(ErrorMessage = "Email jest wymagany")]
        [EmailAddress(ErrorMessage = "Nieprawidłowy adres email")]
        public string Email { get; set; } = string.Empty;

        public string TypKonta { get; set; } = "gosc"; // <- Domyślnie przypisany typ
    }
}
