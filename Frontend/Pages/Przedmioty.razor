@page "/przedmioty/{Kierunek}"
@using Frontend.Shared
@using System.Net.Http.Headers
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JS

<PageTitle>Przedmioty - @Kierunek</PageTitle>

<h3>Przedmioty dla kierunku: @Kierunek</h3>

@if (PrzedmiotyList == null)
{
    <p><em>Ładowanie...</em></p>
}
else
{

    <div class="mb-3">
        <input class="form-control" placeholder="Wyszukaj przedmiot..." @bind="SearchTerm" />
    </div>

    <div class="wiersz-filtrów mb-3">
        <div class="kolumna-filtra">
            <select class="form-select" @bind="SelectedStopien">
                <option value="">Wszystkie stopnie</option>
                @foreach (var s in Stopnie)
                {
                    <option value="@s">@s</option>
                }
            </select>
        </div>

        <div class="kolumna-filtra">
            <select class="form-select" @bind="SelectedOsrodek">
                <option value="">Wszystkie ośrodki</option>
                @foreach (var o in Osrodki)
                {
                    <option value="@o">@o</option>
                }
            </select>
        </div>

        <div class="kolumna-filtra">
            <select class="form-select" @bind="SelectedSemestr">
                <option value="">Wszystkie semestry</option>
                @foreach (var s in Semestry)
                {
                    <option value="@s">Semestr @s</option>
                }
            </select>
        </div>
    </div>

    <div class="dropdown mb-3">
        <button class="btn btn-primary dropdown-toggle" type="button" data-bs-toggle="dropdown">
            Nowy sylabus
        </button>
        <ul class="dropdown-menu">
            <li><a class="dropdown-item" @onclick="CreateEmptySylabus">Stwórz nowy sylabus</a></li>
            <li><a class="dropdown-item" @onclick="ShowCopyModal">Bazuj na istniejącym sylabusie</a></li>
        </ul>
    </div>


    @if (ShowModal)
    {
        <div class="modal show d-block" tabindex="-1" style="background: rgba(0,0,0,0.5);">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Wybierz przedmiot do skopiowania</h5>
                        <button type="button" class="btn-close" @onclick="CloseModal"></button>
                    </div>
                    <div class="modal-body">
                        <select class="form-select" @bind="SelectedPrzedmiotId">
                            <option value="">-- Wybierz przedmiot --</option>
                            @foreach (var p in PrzedmiotyList)
                            {
                                <option value="@p.Id">@p.Nazwa</option>
                            }
                        </select>
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-secondary" @onclick="CloseModal">Anuluj</button>
                        <button class="btn btn-primary" @onclick="CopyLatestSylabus">Utwórz kopię</button>
                    </div>
                </div>
            </div>
        </div>
    }


    var filtered = PrzedmiotyList
        ?.Where(p =>
            (string.IsNullOrWhiteSpace(SearchTerm) || p.Nazwa.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase)) &&
            (string.IsNullOrWhiteSpace(SelectedOsrodek) || p.Osrodek == SelectedOsrodek) &&
            (!SelectedSemestr.HasValue || p.Semestr == SelectedSemestr) &&
            (string.IsNullOrWhiteSpace(SelectedStopien) || p.Stopien == SelectedStopien)
        )
        .ToList();



    @if (!filtered.Any())
    {
        <p>Brak przedmiotów spełniających kryterium wyszukiwania.</p>
    }
    else
    {
        @foreach (var sem in filtered.GroupBy(p => p.Semestr).OrderBy(g => g.Key))
        {
            <h4 id="nazwa">Semestr @sem.Key</h4>
            <ul class="list-group mb-4">
                @foreach (var p in sem)
                {
                    <li class="list-group-item d-flex justify-content-between align-items-center">
                        <div class="d-flex align-items-center justify-content-between w-100">
                            <span @onclick="() => NavigateToPrzedmiot(p.Id)" style="cursor:pointer;">
                                @p.Nazwa
                                <span class="osrodek-badge">@p.Osrodek</span>
                            </span>

                            @if (IsLecturer)
                            {
                                <button class="btn btn-sm btn-outline-secondary ms-3" @onclick="() => EditPrzedmiot(p.Id)">Edytuj</button>
                            }
                        </div>
                    </li>
                }
            </ul>
        }
    }
}

@code {
    [Parameter]
    public string Kierunek { get; set; } = default!;

    private List<PrzedmiotDto>? PrzedmiotyList;
    private string SearchTerm { get; set; } = string.Empty;
    private bool IsLecturer => false; // TODO: sprawdzić rolę z JWT
    private string? SelectedOsrodek { get; set; }
    private int? SelectedSemestr { get; set; }
    private string? SelectedStopien { get; set; }
    private bool ShowModal = false;
    private int? SelectedPrzedmiotId;



    protected override async Task OnInitializedAsync()
    {
        PrzedmiotyList = await Http.GetFromJsonAsync<List<PrzedmiotDto>>($"/api/przedmioty/kierunek/{Uri.EscapeDataString(Kierunek)}");
    }

    private void NavigateToPrzedmiot(int id)
    {
        Navigation.NavigateTo($"/przedmiot/{id}");
    }

    private void EditPrzedmiot(int id)
    {
        Navigation.NavigateTo($"/przedmiot/{id}/edit");
    }

    private List<string> Osrodki =>
        PrzedmiotyList?.Select(p => p.Osrodek).Where(x => !string.IsNullOrWhiteSpace(x)).Distinct().OrderBy(x => x).ToList() ?? new();

    private List<int> Semestry =>
    PrzedmiotyList?
    .Select(p => (int)(p.Semestr ?? 0))
    .Where(s => s > 0)
    .Distinct()
        .OrderBy(s => s)
        .ToList() ?? new();


    private List<string> Stopnie =>
    PrzedmiotyList?
        .Select(p => p.Stopien)
        .Where(s => !string.IsNullOrWhiteSpace(s))
        .Distinct()
        .OrderBy(s => s)
        .ToList() ?? new();


    private void ShowCopyModal()
    {
        ShowModal = true;
    }

    private void CloseModal()
    {
        ShowModal = false;
        SelectedPrzedmiotId = null;
    }

    private void CreateEmptySylabus()
    {
        Navigation.NavigateTo("/sylabus/new");
    }

    private async Task CopyLatestSylabus()
    {
        if (SelectedPrzedmiotId is null)
        {
            Console.WriteLine("pusty XDDDDDDDD");
            return;

        }
            

        var sylabusy = await Http.GetFromJsonAsync<List<SylabusDto>>($"/api/sylabusy/przedmiot/{SelectedPrzedmiotId}");
        var latest = sylabusy?.OrderByDescending(s => s.RokData).FirstOrDefault();

        if (latest is null)
        {
            Console.WriteLine("nowy pusty XDDDDDDDD");
            return;
        }

        var newYear = IncrementAcademicYear(latest.RokData!);

        var newSylabus = new SylabusDto
            {
                PrzedmiotId = latest.PrzedmiotId,
                Wersja = "v1",
                RokData = newYear,
                NazwaJednostkiOrganizacyjnej = latest.NazwaJednostkiOrganizacyjnej,
                ProfilKsztalcenia = latest.ProfilKsztalcenia,
                NazwaSpecjalnosci = latest.NazwaSpecjalnosci,
                RodzajModuluKsztalcenia = latest.RodzajModuluKsztalcenia,
                WymaganiaWstepne = latest.WymaganiaWstepne,
                TresciKsztalcenia = latest.TresciKsztalcenia?.DeepClone(),
                EfektyKsztalcenia = latest.EfektyKsztalcenia?.DeepClone(),
                MetodyWeryfikacji = latest.MetodyWeryfikacji?.DeepClone(),
                KryteriaOceny = latest.KryteriaOceny?.DeepClone(),
                NakladPracy = latest.NakladPracy?.DeepClone(),
                Literatura = latest.Literatura?.DeepClone(),
                MetodyRealizacji = latest.MetodyRealizacji?.DeepClone(),
            };

        var token = await JS.InvokeAsync<string>("localStorage.getItem", "authToken");

        if (!string.IsNullOrWhiteSpace(token))
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

        var result = await Http.PostAsJsonAsync("/api/sylabusy", newSylabus);
        if (result.IsSuccessStatusCode)
        {
            var created = await result.Content.ReadFromJsonAsync<SylabusDto>();
            Console.WriteLine("XDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD");
            Navigation.NavigateTo($"/sylabus/edit/{created!.Id}");
            Console.WriteLine(created!.Id);
            
        }
        else
        {
            var errorText = await result.Content.ReadAsStringAsync();
            Console.WriteLine($"Błąd POST /api/sylabusy: {result.StatusCode} - {errorText}");
        }

        ShowModal = false;
    }

    private string IncrementAcademicYear(string rokData)
    {
        var parts = rokData.Split('/');
        if (parts.Length == 2 && int.TryParse(parts[0], out int start) && int.TryParse(parts[1], out int end))
            return $"{start + 1}/{end + 1}";

        return rokData; // fallback
    }
}
