@page "/przedmioty/{Kierunek}"
@using Frontend.Shared
@using System.Net.Http.Headers
@using System.Text.Json.Nodes
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JS

<PageTitle>Przedmioty - @Kierunek</PageTitle>

<h3>Przedmioty dla kierunku: @Kierunek</h3>

@if (PrzedmiotyList == null)
{
    <p><em>Ładowanie...</em></p>
}
else
{

    <div class="mb-3">
        <input class="form-control" placeholder="Wyszukaj przedmiot..." @bind="SearchTerm" />
    </div>

    <div class="wiersz-filtrów mb-3">
        <div class="kolumna-filtra">
            <select class="form-select" @bind="SelectedStopien">
                <option value="">Wszystkie stopnie</option>
                @foreach (var s in Stopnie)
                {
                    <option value="@s">@s</option>
                }
            </select>
        </div>

        <div class="kolumna-filtra">
            <select class="form-select" @bind="SelectedOsrodek">
                <option value="">Wszystkie ośrodki</option>
                @foreach (var o in Osrodki)
                {
                    <option value="@o">@o</option>
                }
            </select>
        </div>

        <div class="kolumna-filtra">
            <select class="form-select" @bind="SelectedSemestr">
                <option value="">Wszystkie semestry</option>
                @foreach (var s in Semestry)
                {
                    <option value="@s">Semestr @s</option>
                }
            </select>
        </div>
    </div>

    <div class="syl-btn-wrapper">
        <button class="syl-btn-create" @onclick="NavigateToCreateSylabus">
            ➕ Nowy sylabus
        </button>
    </div>







    var filtered = PrzedmiotyList
        ?.Where(p =>
            (string.IsNullOrWhiteSpace(SearchTerm) || p.Nazwa.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase)) &&
            (string.IsNullOrWhiteSpace(SelectedOsrodek) || p.Osrodek == SelectedOsrodek) &&
            (!SelectedSemestr.HasValue || p.Semestr == SelectedSemestr) &&
            (string.IsNullOrWhiteSpace(SelectedStopien) || p.Stopien == SelectedStopien)
        )
        .ToList();



    @if (!filtered.Any())
    {
        <p>Brak przedmiotów spełniających kryterium wyszukiwania.</p>
    }
    else
    {
        @foreach (var sem in filtered.GroupBy(p => p.Semestr).OrderBy(g => g.Key))
        {
            <h4 id="nazwa">Semestr @sem.Key</h4>
            <ul class="list-group mb-4">
                @foreach (var p in sem)
                {
                    <li class="list-group-item d-flex justify-content-between align-items-center">
                        <div class="d-flex align-items-center justify-content-between w-100">
                            <span @onclick="() => NavigateToPrzedmiot(p.Id)" style="cursor:pointer;">
                                @p.Nazwa
                                <span class="osrodek-badge">@p.Osrodek</span>
                            </span>

                            @if (IsLecturer)
                            {
                                <button class="btn btn-sm btn-outline-secondary ms-3" @onclick="() => EditPrzedmiot(p.Id)">Edytuj</button>
                            }
                        </div>
                    </li>
                }
            </ul>
        }
    }
}

@code {


    private void NavigateToCreateSylabus()
    {
        Navigation.NavigateTo($"/sylabus/nowy/{Kierunek}");
    }

    [Parameter]
    public string Kierunek { get; set; } = default!;

    private List<PrzedmiotDto>? PrzedmiotyList;
    private string SearchTerm { get; set; } = string.Empty;
    private bool IsLecturer => false; // TODO: sprawdzić rolę z JWT
    private string? SelectedOsrodek { get; set; }
    private int? SelectedSemestr { get; set; }
    private string? SelectedStopien { get; set; }
    private bool ShowModal = false;
    private int? SelectedPrzedmiotId;



    protected override async Task OnInitializedAsync()
    {
        PrzedmiotyList = await Http.GetFromJsonAsync<List<PrzedmiotDto>>($"/api/przedmioty/kierunek/{Uri.EscapeDataString(Kierunek)}");
    }

    private void NavigateToPrzedmiot(int id)
    {
        Navigation.NavigateTo($"/przedmiot/{id}");
    }

    private void EditPrzedmiot(int id)
    {
        Navigation.NavigateTo($"/przedmiot/{id}/edit");
    }

    private List<string> Osrodki =>
        PrzedmiotyList?.Select(p => p.Osrodek).Where(x => !string.IsNullOrWhiteSpace(x)).Distinct().OrderBy(x => x).ToList() ?? new();

    private List<int> Semestry =>
    PrzedmiotyList?
    .Select(p => (int)(p.Semestr ?? 0))
    .Where(s => s > 0)
    .Distinct()
        .OrderBy(s => s)
        .ToList() ?? new();


    private List<string> Stopnie =>
    PrzedmiotyList?
        .Select(p => p.Stopien)
        .Where(s => !string.IsNullOrWhiteSpace(s))
        .Distinct()
        .OrderBy(s => s)
        .ToList() ?? new();


    private void ShowCopyModal()
    {
        ShowModal = true;
    }

    private void CloseModal()
    {
        ShowModal = false;
        SelectedPrzedmiotId = null;
    }



}
