@page "/przedmioty/{Kierunek}"
@using Frontend.Shared
@using System.Net.Http.Headers
@using System.Text.Json.Nodes
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JS

<PageTitle>Przedmioty - @Kierunek</PageTitle>

<div class="syl-przedmioty-container">
    <h3 class="syl-przedmioty-header">Przedmioty dla kierunku: @Kierunek</h3>

    <div class="syl-top-bar">
        <input class="syl-search" placeholder="Wyszukaj przedmiot..." @bind="SearchTerm" />

        @if (IsLecturer)
        {
            <button class="syl-btn-create" @onclick="NavigateToCreateSylabus">
                ➕ Nowy sylabus
            </button>
        }
    </div>

    <div class="wiersz-filtrów">
        <div class="kolumna-filtra">
            <select class="form-select" @bind="SelectedStopien">
                <option value="">Wszystkie stopnie</option>
                @foreach (var s in Stopnie)
                {
                    <option value="@s">@s</option>
                }
            </select>
        </div>

        <div class="kolumna-filtra">
            <select class="form-select" @bind="SelectedOsrodek">
                <option value="">Wszystkie ośrodki</option>
                @foreach (var o in Osrodki)
                {
                    <option value="@o">@o</option>
                }
            </select>
        </div>

        <div class="kolumna-filtra">
            <select class="form-select" @bind="SelectedSemestr">
                <option value="">Wszystkie semestry</option>
                @foreach (var s in Semestry)
                {
                    <option value="@s">Semestr @s</option>
                }
            </select>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <div class="alert alert-danger">@ErrorMessage</div>
    }
    else if (PrzedmiotyList == null)
    {
        <p><em>Ładowanie...</em></p>
    }
    else
    {
        var filtered = PrzedmiotyList
        ?.Where(p =>
        (string.IsNullOrWhiteSpace(SearchTerm) || p.Nazwa.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase)) &&
        (string.IsNullOrWhiteSpace(SelectedOsrodek) || p.Osrodek == SelectedOsrodek) &&
        (!SelectedSemestr.HasValue || p.Semestr == SelectedSemestr) &&
        (string.IsNullOrWhiteSpace(SelectedStopien) || p.Stopien == SelectedStopien)
        )
        .ToList();

        @if (!filtered.Any())
        {
            <p>Brak przedmiotów spełniających kryterium wyszukiwania.</p>
        }
        else
        {
            @foreach (var sem in filtered.GroupBy(p => p.Semestr).OrderBy(g => g.Key))
            {
                <h4 class="syl-semestr-header">Semestr @sem.Key</h4>
                <ul class="syl-przedmioty-list">
                    @foreach (var p in sem)
                    {
                        <li class="syl-przedmiot-item">
                            <span class="syl-przedmiot-link" @onclick="() => NavigateToPrzedmiot(p.Id)">
                                <span class="syl-przedmiot-nazwa">@p.Nazwa</span>
                                <span class="syl-przedmiot-osrodek">@p.Osrodek</span>
                            </span>
                        </li>
                    }
                </ul>
            }
        }

    }
</div>

@code {
    [Parameter]
    public string Kierunek { get; set; } = default!;

    private List<PrzedmiotDto>? PrzedmiotyList;
    private string SearchTerm { get; set; } = string.Empty;
    private string? SelectedOsrodek { get; set; }
    private int? SelectedSemestr { get; set; }
    private string? SelectedStopien { get; set; }
    private bool IsLecturer = false;
    private string? ErrorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {


            PrzedmiotyList = await Http.GetFromJsonAsync<List<PrzedmiotDto>>($"/api/przedmioty/kierunek/{Uri.EscapeDataString(Kierunek)}");

            var token = await JS.InvokeAsync<string>("localStorage.getItem", "authToken");

            if (!string.IsNullOrEmpty(token))
            {
                var handler = new System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler();
                var jwt = handler.ReadJwtToken(token);

                var role = jwt.Claims.FirstOrDefault(c =>
                    c.Type == "role" || c.Type == "http://schemas.microsoft.com/ws/2008/06/identity/claims/role")?.Value;

                IsLecturer = role == "wykladowca";
            }
        }
        catch (HttpRequestException ex)
        {
            Console.Error.WriteLine($"❌ Błąd HTTP: {ex.Message}");
            Navigation.NavigateTo("/blad/500", true);
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"❌ Błąd ogólny: {ex.Message}");
            Navigation.NavigateTo("/error", true);
        }

    }

    private void NavigateToCreateSylabus()
    {
        Navigation.NavigateTo($"/sylabus/nowy/{Kierunek}");
    }

    private void NavigateToPrzedmiot(int id)
    {
        Navigation.NavigateTo($"/przedmiot/{id}");
    }

    private List<string> Osrodki =>
        PrzedmiotyList?.Select(p => p.Osrodek).Where(x => !string.IsNullOrWhiteSpace(x)).Distinct().OrderBy(x => x).ToList() ?? new();

    private List<int> Semestry =>
        PrzedmiotyList?
            .Select(p => (int)(p.Semestr ?? 0))
            .Where(s => s > 0)
            .Distinct()
            .OrderBy(s => s)
            .ToList() ?? new();

    private List<string> Stopnie =>
        PrzedmiotyList?
            .Select(p => p.Stopien)
            .Where(s => !string.IsNullOrWhiteSpace(s))
            .Distinct()
            .OrderBy(s => s)
            .ToList() ?? new();

}
