@page "/przedmiot/{Id:int}"
@using Frontend.Shared
@using System.Text.Json.Nodes
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime





<PageTitle>Szczegóły przedmiotu</PageTitle>


<nav class="nawigacja-przedmiot">
    <a class="nav-link" @onclick="@(() => ScrollToSection("info"))">I. Ogólne informacje podstawowe o przedmiocie</a>
    <a class="nav-link" @onclick="@(() => ScrollToSection("siatka"))">II. Formy zajęć dydaktycznych oraz wymiar godzin</a>
    <a class="nav-link" @onclick="@(() => ScrollToSection("realizacja"))">III. Metody realizacji zajęć dydaktycznych</a>
    <a class="nav-link" @onclick="@(() => ScrollToSection("efekty"))">IV. Przedmiotowe efekty kształcenia z odniesieniem do efektów kształcenia dla kierunku i obszarów</a>
    <a class="nav-link" @onclick="@(() => ScrollToSection("tresci"))">V. Treści kształcenia</a>
    <a class="nav-link" @onclick="@(() => ScrollToSection("metody"))">VI. Metody weryfikacji efektów kształcenia</a>
    <a class="nav-link" @onclick="@(() => ScrollToSection("kryteria"))">VII. Kryteria oceny osiągniętych efektów kształcenia</a>
    <a class="nav-link" @onclick="@(() => ScrollToSection("naklad"))">VIII.Nakład pracy studenta - wymiar godzin i bilans punktów ECTS</a>
    <a class="nav-link" @onclick="@(() => ScrollToSection("literatura"))">IX. Literatura przedmotu oraz inne materiały dydaktyczne</a>

</nav>

@code {

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("updateNavScroll");
        }
    }

    private async Task ScrollToSection(string sectionId)
    {
        await JS.InvokeVoidAsync("scrollToElement", sectionId);
    }

    private async Task ScrollToTop()
    {
        await JS.InvokeVoidAsync("window.scrollTo", new { top = 0, behavior = "smooth" });
    }


    [Parameter] public int Id { get; set; }
    private PrzedmiotDto? Przedmiot;
    private List<SylabusDto>? Sylabusy;
    private SylabusDto? SelectedSylabus;
    private List<SiatkaPrzedmiotowDto>? Siatka;
    private List<SiatkaPrzedmiotowDto>? Siatki;
    private SiatkaPrzedmiotowDto? SiatkaStacjonarne;
    private SiatkaPrzedmiotowDto? SiatkaNiestacjonarne;
    private string ActiveSection = "tresci";
    [Inject] IJSRuntime JS { get; set; } = default!;
    private bool IsLecturer = false;
    bool IsExporting = false;
    private bool ExportingPdf = false;


    protected override async Task OnInitializedAsync()
    {
        Przedmiot = await Http.GetFromJsonAsync<PrzedmiotDto>($"api/przedmioty/{Id}");
        Sylabusy = await Http.GetFromJsonAsync<List<SylabusDto>>($"api/sylabusy/przedmiot/{Id}");
        Siatki = new List<SiatkaPrzedmiotowDto>();

        var stacjonarne = await Http.GetFromJsonAsync<List<SiatkaPrzedmiotowDto>>(
            $"api/siatka/przedmiot/{Id}/typ/stacjonarne");

        var niestacjonarne = await Http.GetFromJsonAsync<List<SiatkaPrzedmiotowDto>>(
            $"api/siatka/przedmiot/{Id}/typ/niestacjonarne");

        if (stacjonarne != null) Siatki.AddRange(stacjonarne);
        if (niestacjonarne != null) Siatki.AddRange(niestacjonarne);
        SelectedSylabus = Sylabusy?
            .OrderByDescending(s => s.DataPowstania)
            .FirstOrDefault();

        var token = await JS.InvokeAsync<string>("localStorage.getItem", "authToken");
        if (!string.IsNullOrEmpty(token))
        {
            var handler = new System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler();
            var jwt = handler.ReadJwtToken(token);
            var role = jwt.Claims.FirstOrDefault(c =>
                c.Type == "role" ||
                c.Type == "http://schemas.microsoft.com/ws/2008/06/identity/claims/role")?.Value;

            IsLecturer = role == "wykladowca";
        }


    }

    private Task OnTabChange(SylabusDto syl)
    {
        SelectedSylabus = syl;
        return Task.CompletedTask;
    }


    private async Task DownloadPdf()
    {
        ExportingPdf = true;
        StateHasChanged(); // wymuś render z wszystkimi sekcjami

        await Task.Delay(800); // pozwól na pełny render

        await JS.InvokeVoidAsync("exportPdfFromDiv", "pdf-content", $"sylabus_{SelectedSylabus?.RokData}.pdf");

        ExportingPdf = false;
        StateHasChanged(); // przywróć standardowy widok
    }




    void ShowInfo() => ActiveSection = "info";
    void ShowNaklad() => ActiveSection = "naklad";
    void ShowMetody() => ActiveSection = "metody";
    void ShowEfekty() => ActiveSection = "efekty";
    void ShowTresci() => ActiveSection = "tresci";
    void ShowRealizacja() => ActiveSection = "realizacja";
    void ShowKryteria() => ActiveSection = "kryteria";
    void ShowLiteratura() => ActiveSection = "literatura";
    void EditPlaceholder() { /* TODO: implement edit */ }

    RenderFragment RenderAllSections() => __builder =>
    {
        void AddSection(RenderFragment section)
        {
            __builder.OpenElement(0, "div");
            __builder.AddAttribute(1, "style", "page-break-inside: avoid; break-inside: avoid; margin-bottom: 1rem;");
            __builder.AddContent(2, section);
            __builder.CloseElement();
        }

        AddSection(RenderSiatka());
        AddSection(RenderRealizacja());
        AddSection(RenderEfekty());
        AddSection(RenderTresci());
        AddSection(RenderMetody());
        AddSection(RenderKryteria());
        AddSection(RenderNaklad());
        AddSection(RenderLiteratura());
    };

    RenderFragment RenderTresci() => __builder =>
    {
        var tresci = SelectedSylabus.TresciKsztalcenia as JsonObject ?? new JsonObject();
        <div id="tresci" class="effects-title">V. Treści kształcenia</div>
        <table class="table table-bordered table-striped mb-4">
            <thead class="table-header">
                <tr>
                    <th style="width: 10%">Lp.</th>
                    <th>Wykład</th>
                    <th style="width: 30%">Odniesienie do przedmiotowych efektów kształcenia</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var w in tresci["wyklady"].AsArray())
                {
                    <tr>
                        <td class="text-center">@w["lp"]</td>
                        <td>@w["opis"]</td>
                        <td>@string.Join(", ", w["odniesienie"].AsArray().Select(o => o.ToString()))</td>
                    </tr>
                }
            </tbody>
            <thead class="table-header">
                <tr>
                    <th style="width: 10%">Lp.</th>
                    <th>Ćwiczenia</th>
                    <th style="width: 30%">Odniesienie do przedmiotowych efektów kształcenia</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var c in tresci["cwiczenia"].AsArray())
                {
                    <tr>
                        <td class="text-center">@c["lp"]</td>
                        <td>@c["opis"]</td>
                        <td>@string.Join(", ", c["odniesienie"].AsArray().Select(o => o.ToString()))</td>
                    </tr>
                }
            </tbody>
        </table>
    };

    RenderFragment RenderEfekty() => __builder =>
    {
        var grouped = SelectedSylabus.EfektyKsztalcenia
            .AsArray()
            .GroupBy(e => e["rodzaj"]?.ToString())
            .ToDictionary(g => g.Key, g => g.ToList());

        var rodzajLabels = new Dictionary<string, string>
            {
            { "wiedza", "Wiedza:" },
            { "umiejetnosci", "Umiejętności:" },
            { "kompetencje spoleczne", "Kompetencje społeczne:" }
            };

        <div id="efekty" class="effects-container mb-4">
            <div class="effects-title text-center text-uppercase">
                IV. Przedmiotowe efekty kształcenia z odniesieniem do efektów kształcenia dla kierunku i obszarów
            </div>

            <table class="table table-bordered table-striped mb-4">
                <thead class="table-header">
                    <tr>
                        <th style="width: 15%;">Lp.</th>
                        <th style="width: 55%;">Opis przedmiotowych efektów kształcenia</th>
                        <th style="width: 30%;">Odniesienie do efektu kierunkowego</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var grupa in grouped)
                    {
                        <tr>
                            <td colspan="3" style="text-align: center;" class="effects-subheader">
                                @rodzajLabels.GetValueOrDefault(grupa.Key, grupa.Key)
                            </td>
                        </tr>
                        @foreach (var efekt in grupa.Value)
                        {
                            <tr>
                                <td class="text-center">@efekt["lp"]</td>
                                <td>@efekt["opis"]</td>
                                <td>@string.Join(", ", efekt["odniesienie"].AsArray().Select(o => o.ToString()))</td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
    };
    RenderFragment RenderMetody() => __builder =>
    {
        var metody = SelectedSylabus.MetodyWeryfikacji.AsArray();
        var groupedMetody = metody.GroupBy(m => m["rodzaj"]?.ToString()).ToDictionary(g => g.Key, g => g.ToList());
        var rodzajLabels2 = new Dictionary<string, string>
            {
            { "wiedza", "Wiedza:" },
            { "umiejetnosci", "Umiejętności:" },
            { "kompetencje_spoleczne", "Kompetencje społeczne:" }
            };
        <div id="metody" class="effects-title">VI. Metody weryfikacji efektów kształcenia</div>
        <table class="table table-bordered table-striped mb-4">
            <thead class="table-header">
                <tr>
                    <th style="width: 10%">Lp.</th>
                    <th>Metoda weryfikacji</th>
                    <th style="width: 30%">Forma zajęć, w ramach której weryfikowany jest EK</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var grupa in groupedMetody)
                {
                    <tr>
                        <td colspan="3" style="text-align: center;" class="effects-subheader">
                            @rodzajLabels2.GetValueOrDefault(grupa.Key, grupa.Key)
                        </td>
                    </tr>
                    @foreach (var m in grupa.Value)
                    {
                        <tr>
                            <td class="text-center">@m["lp"]</td>
                            <td>@m["opis"]</td>
                            <td>@m["forma_zajec"]</td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    };
    RenderFragment RenderNaklad() => __builder =>
    {
        var nak = SelectedSylabus.NakladPracy as JsonObject ?? new JsonObject();
        var keys = new[] { "zajecia", "konsultacje", "projekt", "sam_przygotowanie", "zaliczenia", "sumaryczne", "kontakt", "praktyczne", "zawodowe", "badania" };
        var labels = new Dictionary<string, string>
            {
            { "zajecia", "Udział w zajęciach dydaktycznych (wykłady, ćwiczenia, konwersatoria, projekt, laboratoria, warsztaty, seminaria) – SUMA godzin – z punktu II" },
            { "konsultacje", "Udział w konsultacjach" },
            { "projekt", "Projekt / esej" },
            { "sam_przygotowanie", "Samodzielne przygotowanie się do zajęć dydaktycznych" },
            { "zaliczenia", "Przygotowanie się do zaliczenia zajęć dydaktycznych" },
            { "sumaryczne", "Sumaryczne obciążenie pracą studenta (25h = 1 ECTS) SUMA godzin/ECTS" },
            { "kontakt", "Obciążenie studenta w ramach zajęć w bezpośrednim kontakcie z nauczycielem" },
            { "praktyczne", "Obciążenie studenta w ramach zajęć o charakterze praktycznym" },
            { "zawodowe", "Obciążenie studenta w ramach zajęć związanych z praktycznym przygotowaniem zawodowym" },
            { "badania", "Obciążenie studenta w ramach zajęć związanych z przygotowaniem do prowadzenia badań" }
            };
        <div id="naklad" class="effects-title">VIII.Nakład pracy studenta - wymiar godzin i bilans punktów ECTS</div>
        <table class="table table-bordered table-striped mb-4">
            <thead class="table-header">
                <tr>
                    <th>Rodzaj aktywności</th>
                    <th>Studia stacjonarne</th>
                    <th>Studia niestacjonarne</th>
                </tr>
            </thead>
            <tbody>
            @foreach (var k in keys)
            {
                var s = nak.TryGetPropertyValue($"{k}_S", out var vs) ? vs : null;
                var n = nak.TryGetPropertyValue($"{k}_N", out var vn) ? vn : null;

                string FormatWithECTS(JsonNode? val)
                {
                    if (val is null || !double.TryParse(val.ToString(), out double hours))
                        return val?.ToString() ?? "";

                    double ects = hours / 25.0;
                    string ectsFormatted = ects % 1 == 0
                        ? ((int)ects).ToString()
                        : ects.ToString("0.0").Replace(".", ",");

                    return $"{hours} / {ectsFormatted}";
                }

                bool isEctsKey = new[] { "sumaryczne", "kontakt", "praktyczne", "zawodowe", "badania" }.Contains(k);

                <tr>
                    <td>@labels[k]</td>
                    <td>@(isEctsKey ? FormatWithECTS(s) : s)</td>
                    <td>@(isEctsKey ? FormatWithECTS(n) : n)</td>
                </tr>
            }


            </tbody>
        </table>
    };
    RenderFragment RenderLiteratura() => __builder =>
    {
        var lit = SelectedSylabus.Literatura as JsonObject ?? new JsonObject();
        <div id="literatura" class="effects-title w-100">IX. Literatura przedmotu oraz inne materiały dydaktyczne</div>
        <table class="table table-bordered table-striped mb-4 w-100">
            <tbody>
                <tr>
                    <td class="effects-subheader">Literatura podstawowa przedmiotu:</td>
                </tr>
                @foreach (var l in lit["podstawowa"].AsArray())
                {
                    <tr><td>@l</td></tr>
                }

                <tr>
                    <td class="effects-subheader">Literatura uzupełniająca przedmiotu:</td>
                </tr>
                @foreach (var l in lit["uzupelniajaca"].AsArray())
                {
                    <tr><td>@l</td></tr>
                }

                @if (lit.TryGetPropertyValue("inne", out var inne) && inne.AsArray().Any())
                {
                    <tr>
                        <td class="effects-subheader">Inne materiały dydaktyczne:</td>
                    </tr>
                    @foreach (var l in inne.AsArray())
                    {
                        <tr><td>@l</td></tr>
                    }
                }
            </tbody>
        </table>
    };
    RenderFragment RenderKryteria() => __builder =>
    {
        var kryteria = SelectedSylabus.KryteriaOceny.AsArray();
        <div id="kryteria" class="effects-title">VII. Kryteria oceny osiągniętych efektów kształcenia</div>
        <table class="table table-bordered table-striped mb-4">
            <thead class="table-header">
                <tr>
                    <th>Efekty kształcenia</th>
                    <th>
                        Ocena niedostateczna
                        Student nie potrafi:
                    </th>
                    <th>
                        Zakres ocen 3,0-3,5
                        Student potrafi:
                    </th>
                    <th>
                        Zakres ocen 4,0-4,5
                        Student potrafi:
                    </th>
                    <th>
                        Ocena bardzo dobra
                        Student potrafi:
                    </th>
                </tr>
            </thead>
            <tbody>
                @foreach (var k in kryteria)
                {
                    <tr>
                        <td class="text-center font-weight-bold">@k["lp"]</td>
                        <td>@k["ocena2"]</td>
                        <td>@k["ocena3"]</td>
                        <td>@k["ocena4"]</td>
                        <td>@k["ocena5"]</td>
                    </tr>
                }
            </tbody>
        </table>
    };
    RenderFragment RenderRealizacja() => __builder =>
    {
        var rel = SelectedSylabus.MetodyRealizacji as JsonObject ?? new JsonObject();
        <div id="realizacja" class="effects-title">III. Metody realizacji zajęć dydaktycznych</div>
        <table class="table table-bordered table-striped mb-4">
            <thead class="table-header">
                <tr>
                    <th>Formy zajęć</th>
                    <th>Metody dydaktyczne</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>Wykład</td>
                    <td>@rel["wyklad_opis"]</td>
                </tr>
                <tr>
                    <td>Ćwiczenia</td>
                    <td>@rel["cwiczenia_opis"]</td>
                </tr>
                @if (rel.ContainsKey("inne_materialy_dydaktyczne"))
                {
                    <tr>
                        <td>Inne materiały dydaktyczne</td>
                        <td>@rel["inne_materialy_dydaktyczne"]</td>
                    </tr>
                }
            </tbody>
        </table>

    };
    RenderFragment RenderSiatka() => __builder =>
    {
    if (Siatki == null)
        return;

    var stacjonarne = Siatki.FirstOrDefault(s => s.Typ == "stacjonarne");
    var niestacjonarne = Siatki.FirstOrDefault(s => s.Typ == "niestacjonarne");

        <div class="effects-title" id="siatka">II. Formy zajęć dydaktycznych oraz wymiar godzin</div>
    <table class="table table-bordered table-striped mb-4">
        <thead class="table-header">
            <tr>
                <th>Forma zajęć</th>
                <th>Studia stacjonarne</th>
                <th>Studia niestacjonarne</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>Wykład</td>
                <td>@(stacjonarne?.Wyklad ?? 0)</td>
                <td>@(niestacjonarne?.Wyklad ?? 0)</td>
            </tr>
            <tr>
                <td>Ćwiczenia</td>
                <td>@(stacjonarne?.Cwiczenia ?? 0)</td>
                <td>@(niestacjonarne?.Cwiczenia ?? 0)</td>
            </tr>
            <tr>
                <td>Konwersatorium</td>
                <td>@(stacjonarne?.Konwersatorium ?? 0)</td>
                <td>@(niestacjonarne?.Konwersatorium ?? 0)</td>
            </tr>
            <tr>
                <td>Laboratorium</td>
                <td>@(stacjonarne?.Laboratorium ?? 0)</td>
                <td>@(niestacjonarne?.Laboratorium ?? 0)</td>
            </tr>
            <tr>
                <td>Warsztaty</td>
                <td>@(stacjonarne?.Warsztaty ?? 0)</td>
                <td>@(niestacjonarne?.Warsztaty ?? 0)</td>
            </tr>
            <tr>
                <td>Projekt</td>
                <td>@(stacjonarne?.Projekt ?? 0)</td>
                <td>@(niestacjonarne?.Projekt ?? 0)</td>
            </tr>
            <tr>
                <td>Seminarium</td>
                <td>@(stacjonarne?.Seminarium ?? 0)</td>
                <td>@(niestacjonarne?.Seminarium ?? 0)</td>
            </tr>
            <tr>
                <td>Konsultacje</td>
                <td>@(stacjonarne?.Konsultacje ?? 0)</td>
                <td>@(niestacjonarne?.Konsultacje ?? 0)</td>
            </tr>
            <tr>
                <td>Egzaminy</td>
                <td>@(stacjonarne?.Egzaminy ?? 0)</td>
                <td>@(niestacjonarne?.Egzaminy ?? 0)</td>
            </tr>
            <tr>
                <td>Suma godzin</td>
                <td><strong>@(stacjonarne?.SumaGodzin ?? 0)</strong></td>
                <td><strong>@(niestacjonarne?.SumaGodzin ?? 0)</strong></td>
            </tr>
        </tbody>
    </table>
    ;
};




    @code {
        private RenderFragment RenderActiveSection() => ActiveSection switch
        {
            "tresci" => RenderTresci(),
            "efekty" => RenderEfekty(),
            "metody" => RenderMetody(),
            "naklad" => RenderNaklad(),
            "literatura" => RenderLiteratura(),
            "kryteria" => RenderKryteria(),
            "realizacja" => RenderRealizacja(),
            _ => builder => builder.AddContent(0, "Nieznana sekcja.")
        };
    }

}


@if (Przedmiot == null || SelectedSylabus == null)
{
    <div class="text-center my-5">
        <div class="spinner-border text-primary" role="status"></div>
        <div>Ładowanie danych...</div>
    </div>
}
else
{
    <div class="main-container" id="pdf-content">

        <RokAkademickiTabs Sylabusy="Sylabusy" Selected="SelectedSylabus" OnChange="OnTabChange" />
        <div class="d-flex justify-content-end mb-3 no-print">
            <button class="btn-action no-print" @onclick="@(() => Navigation.NavigateTo($"/sylabus/{SelectedSylabus.Id}/historia"))">Zobacz wersje</button>
            @if (IsLecturer)
            {
                <button class="btn-action no-print" @onclick="OnEditClick">Edytuj</button>

                @code {
            private async Task OnEditClick()
            {
                await JS.InvokeVoidAsync("localStorage.setItem", "previousUrl", Navigation.Uri);
                Navigation.NavigateTo($"/sylabus/edit/{SelectedSylabus.Id}");
            }
        }

            }
            <button class="btn-action no-print" @onclick="DownloadPdf">Pobierz sylabus</button>
        </div>
        <div class="card mb-4">
            <div class="card-header">
                <h2 class="mb-0">@Przedmiot.Nazwa</h2>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-4">
                        <div id="info" class="effects-title">I. Ogólne informacje podstawowe o przedmiocie</div>
                        <table class="table table-bordered table-striped mb-4">
                            <tbody>
                                <tr>
                                    <td class="table-header">Jednostka organizacyjna</td>
                                    <td>@SelectedSylabus.NazwaJednostkiOrganizacyjnej</td>
                                </tr>
                                <tr>
                                    <td class="table-header">Kierunek i stopień</td>
                                    <td>@Przedmiot.Kierunek, @Przedmiot.Stopien stopień</td>
                                </tr>
                                <tr>
                                    <td class="table-header">Wydział</td>
                                    <td>@Przedmiot.Osrodek</td>
                                </tr>
                                <tr>
                                    <td class="table-header">Profil kształcenia</td>
                                    <td>@SelectedSylabus.ProfilKsztalcenia</td>
                                </tr>
                                <tr>
                                    <td class="table-header">Specjalność</td>
                                    <td>@SelectedSylabus.NazwaSpecjalnosci</td>
                                </tr>
                                <tr>
                                    <td class="table-header">Rodzaj modułu</td>
                                    <td>@SelectedSylabus.RodzajModuluKsztalcenia</td>
                                </tr>
                                <tr>
                                    <td class="table-header">Semestr</td>
                                    <td>@Przedmiot.Semestr</td>
                                </tr>
                                @if (SelectedSylabus.Koordynatorzy != null && SelectedSylabus.Koordynatorzy.Any())
                                {
                                    <tr>
                                        <td class="table-header">Koordynator</td>
                                        <td>@string.Join(", ", SelectedSylabus.Koordynatorzy)</td>
                                    </tr>
                                }
                                <tr>
                                    <td class="table-header">Wymagania wstępne</td>
                                    <td>@SelectedSylabus.WymaganiaWstepne</td>
                                </tr>

                                <tr>
                                    <td class="table-header">Rok akademicki:</td>
                                    <td>@SelectedSylabus.RokData</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                    <div class="col-md-8">



                        <button class="scroll-top-btn" @onclick="ScrollToTop">
                            ⬆ Na górę
                        </button>

                        <div class="d-flex">

                            <div class="flex-fill">



                                @RenderAllSections()


                            

                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
