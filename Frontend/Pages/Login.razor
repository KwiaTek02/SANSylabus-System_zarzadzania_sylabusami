@page "/login"
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JS
@using Microsoft.AspNetCore.WebUtilities
@using System.ComponentModel.DataAnnotations

<!-- ALERTY -->
<div class="alert-container">
    @if (ShowSuccess)
    {
        <div class="custom-alert success">@SuccessMessage</div>
    }

    @if (ShowError)
    {
        <div class="custom-alert error">@ErrorMessage</div>
    }
</div>

<!-- FORMULARZ -->
<div class="auth-form-container">
    <div class="auth-card elegant-card">
        <h3 class="auth-title">Logowanie</h3>

        <EditForm Model="@LoginModel" OnSubmit="HandleLogin">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="input-with-icon mb-4">
                <i class="bi bi-person-fill"></i>
                <InputText class="form-control icon-input" @bind-Value="LoginModel.Login" placeholder="Wpisz login" />
            </div>

            <div class="input-icon-row mb-4">
                <div class="input-with-icon">
                    <i class="bi bi-lock-fill"></i>
                    <input @ref="PasswordInput"
                           class="form-control icon-input no-right-radius"
                           @bind="LoginModel.Password"
                           placeholder="Wpisz hasło"
                           type="@PasswordInputType" />
                </div>
                <button type="button" class="eye-button" @onclick="TogglePasswordVisibility">
                    <i class="bi @(ShowPassword ? "bi-eye-slash-fill" : "bi-eye-fill")"></i>
                </button>
            </div>

            <button type="submit" class="btn btn-primary login-button">Zaloguj się</button>
        </EditForm>

        <div class="register-text">
            Nie masz konta?
            <a href="/register">Zarejestruj się</a>
        </div>
    </div>
</div>

@code {
    private LoginRequest LoginModel = new();
    private ElementReference PasswordInput;
    private bool ShowPassword;
    private string PasswordInputType => ShowPassword ? "text" : "password";

    private string? SuccessMessage;
    private string? ErrorMessage;
    private bool ShowSuccess;
    private bool ShowError;

    private string ReturnUrl = "/";

    protected override void OnInitialized()
    {
        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
        var query = QueryHelpers.ParseQuery(uri.Query);
        ReturnUrl = query.TryGetValue("returnUrl", out var value) ? value : "/";
    }

    private void TogglePasswordVisibility()
    {
        ShowPassword = !ShowPassword;
    }

    private async Task HandleLogin()
    {
        ShowError = false;
        ShowSuccess = false;
        ErrorMessage = null;
        SuccessMessage = null;

        var validationContext = new ValidationContext(LoginModel);
        var validationResults = new List<ValidationResult>();
        if (!Validator.TryValidateObject(LoginModel, validationContext, validationResults, true))
        {
            await ShowErrorAlert("Uzupełnij wszystkie wymagane pola.");
            return;
        }

        try
        {
            var response = await Http.PostAsJsonAsync("api/auth/login", LoginModel);
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<AuthResponse>();
                await JS.InvokeVoidAsync("localStorage.setItem", "authToken", result!.Token);
                await JS.InvokeVoidAsync("localStorage.setItem", "authUser", GetLoginFromToken(result.Token));

                await ShowSuccessAlert("Zalogowano pomyślnie. Następuje przekierowanie...");
                Navigation.NavigateTo(ReturnUrl, true);
            }
            else
            {
                var error = await response.Content.ReadFromJsonAsync<Dictionary<string, string>>();
                await ShowErrorAlert(error?["message"] ?? "Nie udało się zalogować.");
            }
        }
        catch (Exception ex)
        {
            await ShowErrorAlert($"Błąd: {ex.Message}");
        }
    }

    private async Task ShowSuccessAlert(string message)
    {
        SuccessMessage = message;
        ShowSuccess = true;
        StateHasChanged();

        await Task.Delay(3000);
        ShowSuccess = false;
        SuccessMessage = null;
        StateHasChanged();
    }

    private async Task ShowErrorAlert(string message)
    {
        ErrorMessage = message;
        ShowError = true;
        StateHasChanged();

        await Task.Delay(3000);
        ShowError = false;
        ErrorMessage = null;
        StateHasChanged();
    }

    private string GetLoginFromToken(string token)
    {
        var parts = token.Split('.');
        if (parts.Length != 3)
            return "Nieznany";

        var payload = System.Text.Json.JsonDocument.Parse(
            System.Text.Encoding.UTF8.GetString(Convert.FromBase64String(AddPadding(parts[1]))));

        return payload.RootElement.TryGetProperty("login", out var loginProp)
            ? loginProp.GetString() ?? "Nieznany"
            : "Nieznany";
    }

    private static string AddPadding(string base64)
    {
        return base64.PadRight(base64.Length + (4 - base64.Length % 4) % 4, '=');
    }

    public class LoginRequest
    {
        [Required(ErrorMessage = "Login jest wymagany")]
        public string Login { get; set; } = "";

        [Required(ErrorMessage = "Hasło jest wymagane")]
        public string Password { get; set; } = "";
    }

    public class AuthResponse
    {
        public string Token { get; set; } = "";
        public DateTime ExpiresAt { get; set; }
    }
}
