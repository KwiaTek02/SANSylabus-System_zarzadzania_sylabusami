@page "/sylabus/{SylabusId:int}/historia"
@using Frontend.Shared
@inject HttpClient Http


<h3>Informacje sylabusa</h3>

@* Sprawdzenie, czy dane zostały załadowane – jeśli nie, wyświetla komunikat *@
@if (SzczegolySylabusa == null)
{
    <p>Ładowanie informacji o sylabusie...</p>
}
else
{
    @* Tabela z podstawowymi informacjami o sylabusie *@
    <table class="table table-bordered table-striped">
        <thead class="table-header">
            <tr>
                <th>Pole</th>
                <th>Wartość</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>Data powstania</td>
                <td>@SzczegolySylabusa.DataPowstania?.ToString("yyyy-MM-dd HH:mm")</td>
            </tr>
            <tr>
                <td>Stworzył</td>
                <td>
                    @(SzczegolySylabusa.StworzylImieNazwiskoTytul ?? $"ID: {SzczegolySylabusa.KtoStworzyl}")
                </td>
            </tr>
        </tbody>
    </table>
}

@* Tytuł sekcji z historią zmian *@
<h3>Historia zmian sylabusa</h3>

@* Sprawdzenie, czy historia została załadowana *@
@if (Historia == null)
{
    <p>Ładowanie historii...</p>
}
else
{
    @* Grupowanie historii po wersji i sortowanie malejąco po numerze wersji *@
    var grupy = Historia
        .GroupBy(h => h.WersjaWtedy)
        .OrderByDescending(g => ParseVersionNumber(g.Key));

    @* Selektor wyboru wersji sylabusa – filtruje wpisy w tabeli poniżej *@
    <div class="syl-version-select-wrapper">
        <label for="sylVersionSelect" class="syl-version-label me-2">Wersja:</label>
        <select id="sylVersionSelect" class="form-select syl-version-select" @bind="ActiveVersion">
            @foreach (var grupa in grupy)
            {
                <option value="@grupa.Key">@grupa.Key</option>
            }
        </select>
    </div>

    @* Tabela z historią zmian dla wybranej wersji sylabusa *@
    <table class="table table-bordered table-striped">
        <thead class="table-header">
            <tr>
                <th>Data zmiany</th>
                <th>Godzina</th>
                <th>Opis zmiany</th>
                <th>Kto zmodyfikował</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var h in Historia.Where(h => h.WersjaWtedy == ActiveVersion))
            {
                <tr>
                    <td>@h.DataZmiany</td>
                    <td>@h.CzasZmiany.ToShortTimeString()</td>
                    <td>@h.OpisZmiany</td>
                    <td>@h.ZmieniajacyImieNazwiskoTytul</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    [Parameter] public int SylabusId { get; set; }
    private List<SylabusHistoriaDto>? Historia;
    private SylabusDto? SzczegolySylabusa;
    private string? ActiveVersion;
    protected override async Task OnInitializedAsync()
    {
        var historiaTask = Http.GetFromJsonAsync<List<SylabusHistoriaDto>>($"/api/sylabusy/{SylabusId}/historia");
        var szczegolyTask = Http.GetFromJsonAsync<SylabusDto>($"/api/sylabusy/{SylabusId}");

        await Task.WhenAll(historiaTask, szczegolyTask);

        Historia = await historiaTask;
        SzczegolySylabusa = await szczegolyTask;

        @* Domyślnie ustawiamy aktywną wersję na pierwszą z historii *@
        ActiveVersion = Historia?.FirstOrDefault()?.WersjaWtedy;
    }

    void SelectVersion(string wersja) => ActiveVersion = wersja;

    private void OnVersionChanged(ChangeEventArgs e)
    {
        ActiveVersion = e.Value?.ToString();
    }

    @* Metoda do konwersji tekstu wersji (np. "v1") na liczbę do sortowania *@
    int ParseVersionNumber(string? wersja)
    {
        if (string.IsNullOrWhiteSpace(wersja)) return 0;
        if (wersja.StartsWith("v") && int.TryParse(wersja[1..], out var num))
            return num;
        return 0;
    }
}
