@page "/sylabus/edit/{Id:int}"
@using System.Text.Json.Nodes
@using System.Security.Claims
@using System.Net.Http.Headers
@using System.Text
@using System.Text.Json

@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JS

<h3 id="glownyEdycji">Edytuj sylabus</h3>

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger">@ErrorMessage</div>
}

@if (Model == null)
{
    <p>Ładowanie...</p>
}
else
{
    <EditForm Model="Model" OnValidSubmit="HandleSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <h4 class="naglowki-edycja">Informacje ogólne</h4>

        <div class="sekcja-informacji">
            <div class="wiersz-informacji">
                <div class="etykieta">Jednostka organizacyjna</div>
                <InputText class="pole-tekstowe" @bind-Value="Model.NazwaJednostkiOrganizacyjnej" />
            </div>
            <div class="wiersz-informacji">
                <div class="etykieta">Profil kształcenia</div>
                <InputText class="pole-tekstowe" @bind-Value="Model.ProfilKsztalcenia" />
            </div>
            <div class="wiersz-informacji">
                <div class="etykieta">Specjalność</div>
                <InputText class="pole-tekstowe" @bind-Value="Model.NazwaSpecjalnosci" />
            </div>
            <div class="wiersz-informacji">
                <div class="etykieta">Rodzaj modułu</div>
                <InputText class="pole-tekstowe" @bind-Value="Model.RodzajModuluKsztalcenia" />
            </div>
            <div class="wiersz-informacji">
                <div class="etykieta">Wymagania wstępne</div>
                <InputText class="pole-tekstowe" @bind-Value="Model.WymaganiaWstepne" />
            </div>
            <div class="wiersz-informacji">
                <div class="etykieta">Rok akademicki</div>
                <InputText class="pole-tekstowe" @bind-Value="Model.RokData" />
            </div>
        </div>


        <hr />
        @*SIatka przedmiotów*@
        <hr />
        <h4 class="naglowki-edycja">Formy zajęć dydaktycznych oraz wymiar godzin</h4>

        <table class="table table-bordered table-striped w-100">
            <thead>
            <tr>
                <th>Forma zajęć</th>
                <th>Studia stacjonarne</th>
                <th>Studia niestacjonarne</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var forma in FormyZajec)
            {
                <tr>
                    <td>@forma.Nazwa</td>
                    <td>
                        <InputNumber class="form-control" @bind-Value="forma.GodzinyStacjonarne" />
                    </td>
                    <td>
                        <InputNumber class="form-control" @bind-Value="forma.GodzinyNiestacjonarne" />
                    </td>
                </tr>
            }
            </tbody>
        </table>

        @*Treści kształcenia*@

        <h4 class="naglowki-edycja">Treści kształcenia</h4>


        <h1 class="naglowek-tresci">Wykłady</h1>

        <!-- Nagłówek kolumn -->
        <div class="wiersz-wykladu naglowek-kolumn">
            <div class="komorka lp komorka-naglowek">Lp.</div>
            <div class="komorka odniesienie komorka-naglowek">Odniesienie</div>
            <div class="komorka opis komorka-naglowek">Opis</div>
            <div class="kryt-komorka kryt-col-btn"></div>
        </div>

        @for (int i = 0; i < Wyklady.Count; i++)
        {
            var localIndex = i;
            var item = Wyklady[localIndex];
            <div class="wiersz-wykladu">
                <div class="komorka lp">Lp. @item.Lp</div>
                <div class="komorka odniesienie">
                    <InputText class="wpisywanie-tresci-wykladu" @bind-Value="item.OdniesienieRaw" placeholder="Odniesienia (np. P_W01, P_U02)" />
                </div>
                <div class="komorka opis">
                    <InputText class="wpisywanie-tresci-wykladu" @bind-Value="item.Opis" />
                </div>
                <button type="button" class="usun-btn" title="Usuń"
                        @onclick="() => { Wyklady.RemoveAt(localIndex); UpdateLp(Wyklady); }">
                    <i class="bi bi-trash"></i> Usuń
                </button>
            </div>
        }

                <button type="button"
                        class="btn-kryt-dodaj"
                        @onclick="AddWyklad">
                    Dodaj wiersz wykładu
                </button>



        <h1 class="naglowek-tresci">Ćwiczenia</h1>

        <!-- Nagłówek kolumn -->
        <div class="wiersz-wykladu naglowek-kolumn">
            <div class="komorka lp komorka-naglowek">Lp.</div>
            <div class="komorka odniesienie komorka-naglowek">Odniesienie</div>
            <div class="komorka opis komorka-naglowek">Opis</div>
            <div class="kryt-komorka kryt-col-btn"></div>
        </div>


        @for (int i = 0; i < Cwiczenia.Count; i++)
        {
            var localIndex = i;
            var item = Cwiczenia[localIndex];
            <div class="wiersz-wykladu">
                <div class="komorka lp">Lp. @item.Lp</div>
                <div class="komorka odniesienie">
                    <InputText class="wpisywanie-tresci-wykladu" @bind-Value="item.OdniesienieRaw" placeholder="np. P_W01, P_U02" />
                </div>
                <div class="komorka opis">
                    <InputText class="wpisywanie-tresci-wykladu" @bind-Value="item.Opis" />
                </div>
                <button type="button" class="usun-btn"
                        @onclick="() => { Cwiczenia.RemoveAt(localIndex); UpdateLp(Cwiczenia); }">
                    <i class="bi bi-trash"></i> Usuń
                </button>
            </div>
        }
        
            <button type="button"
                    class="btn-kryt-dodaj"
                    @onclick="AddCwiczenie">
                Dodaj wiersz ćwiczenia
            </button>



        @*Efekty kształcenia*@

        <h4 class="naglowki-edycja">Efekty kształcenia</h4>

        <h1 class="naglowek-efekty-ksztalcenia">Wiedza</h1>

        <!-- Nagłówki kolumn -->
        <div class="wiersz-wykladu naglowek-kolumn">
            <div class="komorka lp komorka-naglowek">Lp.</div>
            <div class="komorka odniesienie komorka-naglowek">Odniesienia</div>
            <div class="komorka opis komorka-naglowek">Opis</div>
            <div class="kryt-komorka kryt-col-btn"></div>
        </div>

        @for (int i = 0; i < EfektyWiedza.Count; i++)
        {
            var localIndex = i;
            var item = EfektyWiedza[localIndex];
            <div class="wiersz-wykladu">
                <div class="komorka lp">
                    <InputText class="wpisywanie-tresci-wykladu" @bind-Value="item.Lp" placeholder="Np. P_W01" />
                </div>
                <div class="komorka odniesienie">
                    <InputText class="wpisywanie-tresci-wykladu" @bind-Value="item.OdniesienieRaw" placeholder="Odniesienia (np. K_W01)" />
                </div>
                <div class="komorka opis">
                    <InputText class="wpisywanie-tresci-wykladu" @bind-Value="item.Opis" placeholder="Opis efektu" />
                </div>

                <button type="button" class="usun-btn"
                        @onclick="() => EfektyWiedza.RemoveAt(localIndex)">
                    <i class="bi bi-trash"></i> Usuń
                </button>
            </div>
        }

        <button type="button"
                class="btn-kryt-dodaj"
                @onclick="AddEfektWiedza">
            Dodaj efekt wiedzy
        </button>


        <h1 class="naglowek-efekty-ksztalcenia">Umiejętności</h1>

        <!-- Nagłówek kolumn -->
        <div class="wiersz-wykladu naglowek-kolumn">
            <div class="komorka lp komorka-naglowek">Lp.</div>
            <div class="komorka odniesienie komorka-naglowek">Odniesienia</div>
            <div class="komorka opis komorka-naglowek">Opis</div>
            <div class="kryt-komorka kryt-col-btn"></div>
        </div>

        @for (int i = 0; i < EfektyUmiejetnosci.Count; i++)
        {
            var localIndex = i;
            var item = EfektyUmiejetnosci[localIndex];
            <div class="wiersz-wykladu">
                <div class="komorka lp">
                    <InputText class="wpisywanie-tresci-wykladu" @bind-Value="item.Lp" placeholder="Np. P_U01" />
                </div>
                <div class="komorka odniesienie">
                    <InputText class="wpisywanie-tresci-wykladu" @bind-Value="item.OdniesienieRaw" placeholder="Odniesienia (np. K_U01)" />
                </div>
                <div class="komorka opis">
                    <InputText class="wpisywanie-tresci-wykladu" @bind-Value="item.Opis" placeholder="Opis efektu" />
                </div>

                <button type="button" class="usun-btn"
                        @onclick="() => EfektyUmiejetnosci.RemoveAt(localIndex)">
                    <i class="bi bi-trash"></i> Usuń
                </button>


            </div>
        }

        <button type="button"
                class="btn-kryt-dodaj"
                @onclick="AddEfektUmiejetnosc">
            Dodaj efekt umiejętności
        </button>



        <h1 class="naglowek-efekty-ksztalcenia">Kompetencje społeczne</h1>

        <!-- Nagłówek kolumn -->
        <div class="wiersz-wykladu naglowek-kolumn">
            <div class="komorka lp komorka-naglowek">Lp.</div>
            <div class="komorka odniesienie komorka-naglowek">Odniesienia</div>
            <div class="komorka opis komorka-naglowek">Opis</div>
            <div class="kryt-komorka kryt-col-btn"></div>
        </div>

        @for (int i = 0; i < EfektyKompetencje.Count; i++)
        {
            var localIndex = i;
            var item = EfektyKompetencje[localIndex];
            <div class="wiersz-wykladu">
                <div class="komorka lp">
                    <InputText class="wpisywanie-tresci-wykladu" @bind-Value="item.Lp" placeholder="Np. P_K01" />
                </div>
                <div class="komorka odniesienie">
                    <InputText class="wpisywanie-tresci-wykladu" @bind-Value="item.OdniesienieRaw" placeholder="Odniesienia (np. K_K01)" />
                </div>
                <div class="komorka opis">
                    <InputText class="wpisywanie-tresci-wykladu" @bind-Value="item.Opis" placeholder="Opis efektu" />
                </div>

                <button type="button" class="usun-btn"
                        @onclick="() => EfektyKompetencje.RemoveAt(localIndex)">
                    <i class="bi bi-trash"></i> Usuń
                </button>
            </div>
        }

        <button type="button"
                class="btn-kryt-dodaj"
                @onclick="AddEfektKompetencja">
            Dodaj efekt kompetencji
        </button>



        @*Metody weyfikacji*@

        <h4 class="naglowki-edycja">Metody weryfikacji</h4>
        <h1 class="naglowek-efekty-ksztalcenia">Wiedza</h1>

        <div class="naglowek-kolumn">
            <div class="komorka-naglowek lp">Lp.</div>
            <div class="komorka-naglowek opis">Opis metody weryfikacji</div>
            <div class="komorka-naglowek odniesienie">Forma zajęć</div>
            <div class="kryt-komorka kryt-col-btn"></div>

        </div>

        @for (int i = 0; i < MetodyWeryfikacjiWiedza.Count; i++)
        {
            var localIndex = i;
            var item = MetodyWeryfikacjiWiedza[i];
            <div class="wiersz-wykladu">
                <div class="komorka lp">
                    <InputText class="wpisywanie-tresci-wykladu" @bind-Value="item.Lp" placeholder="Np. M_W01" />
                </div>
                <div class="komorka opis">
                    <InputText class="wpisywanie-tresci-wykladu" @bind-Value="item.Opis" placeholder="Opis metody weryfikacji" />
                </div>
                <div class="komorka odniesienie">
                    <InputText class="wpisywanie-tresci-wykladu" @bind-Value="item.FormaZajec" placeholder="Forma zajęć" />
                </div>

                <button type="button" class="usun-btn"
                        @onclick="() => MetodyWeryfikacjiWiedza.RemoveAt(localIndex)">
                    <i class="bi bi-trash"></i> Usuń
                </button>
            </div>
        }

        <button type="button"
                class="btn-kryt-dodaj"
                @onclick="AddMetodaWeryfikacjiWiedza">
            Dodaj metodę weryfikacji wiedzy
        </button>




        <h1 class="naglowek-efekty-ksztalcenia">Umiejętności</h1>

        <div class="naglowek-kolumn">
            <div class="komorka-naglowek lp">Lp.</div>
            <div class="komorka-naglowek opis">Opis metody weryfikacji</div>
            <div class="komorka-naglowek odniesienie">Forma zajęć</div>
            <div class="kryt-komorka kryt-col-btn"></div>

        </div>

        @for (int i = 0; i < MetodyWeryfikacjiUmiejetnosci.Count; i++)
        {
            var localIndex = i;
            var item = MetodyWeryfikacjiUmiejetnosci[localIndex];
            <div class="wiersz-wykladu">
                <div class="komorka lp">
                    <InputText class="wpisywanie-tresci-wykladu" @bind-Value="item.Lp" placeholder="Np. M_W01" />
                </div>
                <div class="komorka opis">
                    <InputText class="wpisywanie-tresci-wykladu" @bind-Value="item.Opis" placeholder="Opis metody weryfikacji" />
                </div>
                <div class="komorka odniesienie">
                    <InputText class="wpisywanie-tresci-wykladu" @bind-Value="item.FormaZajec" placeholder="Forma zajęć" />
                </div>

                <button type="button" class="usun-btn"
                        @onclick="() => MetodyWeryfikacjiUmiejetnosci.RemoveAt(localIndex)">
                    <i class="bi bi-trash"></i> Usuń
                </button>
            </div>
        }

        <button type="button"
                class="btn-kryt-dodaj"
                @onclick="AddMetodaWeryfikacjiUmiejetnosc">
            Dodaj metodę weryfikacji umiejętności
        </button>

        <h1 class="naglowek-efekty-ksztalcenia">Kompetencje społeczne</h1>

        <div class="naglowek-kolumn">
            <div class="komorka-naglowek lp">Lp.</div>
            <div class="komorka-naglowek opis">Opis metody weryfikacji</div>
            <div class="komorka-naglowek odniesienie">Forma zajęć</div>
            <div style="width: 50px;"></div>
        </div>

        @for (int i = 0; i < MetodyWeryfikacjiKompetencje.Count; i++)
        {
            var localIndex = i;
            var item = MetodyWeryfikacjiKompetencje[localIndex];
            <div class="wiersz-wykladu">
                <div class="komorka lp">
                    <InputText class="wpisywanie-tresci-wykladu" @bind-Value="item.Lp" placeholder="Np. M_W01" />
                </div>
                <div class="komorka opis">
                    <InputText class="wpisywanie-tresci-wykladu" @bind-Value="item.Opis" placeholder="Opis metody weryfikacji" />
                </div>
                <div class="komorka odniesienie">
                    <InputText class="wpisywanie-tresci-wykladu" @bind-Value="item.FormaZajec" placeholder="Forma zajęć" />
                </div>

                <button type="button" class="usun-btn"
                        @onclick="() => MetodyWeryfikacjiKompetencje.RemoveAt(localIndex)">
                    <i class="bi bi-trash"></i> Usuń
                </button>
            </div>
        }

        <button type="button"
                class="btn-kryt-dodaj"
                @onclick="AddMetodaWeryfikacjiKompetencja">
            Dodaj metodę weryfikacji kompetencji
        </button>


        @*Kryteria Oceny*@

        <h4 class="naglowki-edycja">Kryteria oceny osiągniętych efektów kształcenia</h4>


        <div class="kryt-tabela">

            <!-- Wiersz nagłówkowy -->
            <div class="kryt-wiersz kryt-naglowek">
                <div class="kryt-komorka kryt-col-lp">Efekt kształcenia</div>
                <div class="kryt-komorka kryt-col">Ocena niedostateczna – student nie potrafi</div>
                <div class="kryt-komorka kryt-col">Zakres ocen 3.0–3.5 – student potrafi</div>
                <div class="kryt-komorka kryt-col">Zakres ocen 4.0–4.5 – student potrafi</div>
                <div class="kryt-komorka kryt-col">Ocena bardzo dobra – student potrafi</div>
                <div class="kryt-komorka kryt-col-btn"></div>
            </div>

            @for (int i = 0; i < KryteriaOceny.Count; i++)
            {
                var localIndex = i;
                var item = KryteriaOceny[localIndex];
                <div class="kryt-wiersz">
                    <InputTextArea class="kryt-input kryt-col-lp" @bind-Value="item.Lp" placeholder="Np. P_W01" Rows="2" />
                    <InputTextArea class="kryt-input kryt-col" @bind-Value="item.Ocena2" placeholder="Ocena 2.0 – Student nie potrafi..." Rows="2" />
                    <InputTextArea class="kryt-input kryt-col" @bind-Value="item.Ocena3" placeholder="Ocena 3.0–3.5 – Student potrafi..." Rows="2" />
                    <InputTextArea class="kryt-input kryt-col" @bind-Value="item.Ocena4" placeholder="Ocena 4.0–4.5 – Student potrafi..." Rows="2" />
                    <InputTextArea class="kryt-input kryt-col" @bind-Value="item.Ocena5" placeholder="Ocena 5.0 – Student potrafi..." Rows="2" />

                    <button type="button" class="kryt-usun kryt-col-btn"
                            @onclick="() => KryteriaOceny.RemoveAt(localIndex)">
                        <i class="bi bi-trash"></i> Usuń
                    </button>
                </div>
            }
        </div>

        <button type="button"
                class="btn-kryt-dodaj"
                @onclick="AddKryteriumOceny">
            Dodaj kryterium
        </button>




        @*Nakład pracy*@

        <hr />
        <h4 class="naglowki-edycja">Nakład pracy studenta</h4>

        <table class="table table-bordered table-striped w-100">
            <thead>
                <tr>
                    <th>Rodzaj aktywności</th>
                    <th>Studia stacjonarne</th>
                    <th>Studia niestacjonarne</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var row in NakladPracy)
                {
                    <tr>
                        <td>@row.Label</td>
                        <td>
                            <InputNumber class="form-control" @bind-Value="row.Stacjonarne" />
                        </td>
                        <td>
                            <InputNumber class="form-control" @bind-Value="row.Niestacjonarne" />
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        @*Literatura*@

        <hr />
        <h4 class="naglowki-edycja">Literatura</h4>

        <h1 class="naglowek-efekty-ksztalcenia">Podstawowa</h1>

        @for (int i = 0; i < LiteraturaPodstawowa.Count; i++)
        {
            var localIndex = i;
            <div class="d-flex align-items-center gap-2 mb-2">
                <InputText class="do-wpisywania flex-grow-1" @bind-Value="LiteraturaPodstawowa[localIndex]" />

                <button type="button" class="usun-literatura"
                        @onclick="() => LiteraturaPodstawowa.RemoveAt(localIndex)">
                    <i class="bi bi-trash"></i> Usuń
                </button>
            </div>
        }

        <button type="button"
                class="btn-kryt-dodaj"
                @onclick="AddLiteraturaPodstawowa">
            Dodaj pozycję
        </button>



        <h1 class="naglowek-efekty-ksztalcenia">Uzupełniająca</h1>
        @for (int i = 0; i < LiteraturaUzupelniajaca.Count; i++)
        {
            var localIndex = i;
            <div class="input-group mb-2">
                <InputText class="do-wpisywania" @bind-Value="LiteraturaUzupelniajaca[localIndex]" />

                <button type="button" class="usun-literatura"
                        @onclick="() => LiteraturaUzupelniajaca.RemoveAt(localIndex)">
                    <i class="bi bi-trash"></i> Usuń
                </button>
            </div>
        }
        <button type="button"
                class="btn-kryt-dodaj"
                @onclick="AddLiteraturaUzupelniajaca">Dodaj pozycję
        </button>


        <h1 class="naglowek-efekty-ksztalcenia">Inne materiały dydaktyczne</h1>
        @for (int i = 0; i < LiteraturaInne.Count; i++)
        {
            var localIndex = i;
            <div class="input-group mb-2">
                <InputText class="do-wpisywania" @bind-Value="LiteraturaInne[localIndex]" />
                <button type="button" class="usun-literatura"
                        @onclick="() => LiteraturaInne.RemoveAt(localIndex)">
                    <i class="bi bi-trash"></i> Usuń
                </button>

            </div>
        }
        <button type="button"
                class="btn-kryt-dodaj"
                @onclick="AddLiteraturaInne">
            Dodaj pozycję
        </button>

        @*Metody realizacji*@

        <hr />
        <h4 class="naglowki-edycja">Metody realizacji zajęć dydaktycznych</h4>

        <div class="tabela-metod">
            
            <div class="naglowek-komorka">Forma zajęć</div>
            <div class="naglowek-komorka">Metody dydaktyczne</div>

            <div class="forma-zajec-label">Wykład</div>
            <InputText class="do-wpisywania" @bind-Value="MetodyWyklad" placeholder="Opis metody dydaktycznej" />

            <div class="forma-zajec-label">Ćwiczenia</div>
            <InputText class="do-wpisywania" @bind-Value="MetodyCwiczenia" placeholder="Opis metody dydaktycznej" />

            <div class="forma-zajec-label">Inne materiały dydaktyczne</div>
            <InputText class="do-wpisywania" @bind-Value="MetodyInneOpis" placeholder="Opis metody dydaktycznej" />
        </div>

        <hr />

        <InputText class="do-wpisywania"
                   @bind-Value="Model.OpisZmiany"
                   placeholder="Opis zmiany (dla historii)..."
                   required />
        <ValidationMessage For="@(() => Model.OpisZmiany)" />

        
        <button type="submit" class="zmiany">Zapisz zmiany</button>
        </EditForm>

   

}

@code {
    [Parameter] public int Id { get; set; }

    private UpdateSylabusRequest? Model;
    private SylabusDto? Sylabus;

    private List<TrescViewModel> Wyklady = new();
    private List<TrescViewModel> Cwiczenia = new();
    private List<EfektViewModel> EfektyWiedza = new();
    private List<EfektViewModel> EfektyUmiejetnosci = new();
    private List<EfektViewModel> EfektyKompetencje = new();
    private List<MetodaViewModel> MetodyWeryfikacjiWiedza = new();
    private List<MetodaViewModel> MetodyWeryfikacjiUmiejetnosci = new();
    private List<MetodaViewModel> MetodyWeryfikacjiKompetencje = new();
    private List<KryteriumOcenyViewModel> KryteriaOceny = new();
    private List<NakladPracyViewModel> NakladPracy = new();
    private List<string> LiteraturaPodstawowa = new();
    private List<string> LiteraturaUzupelniajaca = new();
    private List<string> LiteraturaInne = new();
    private SiatkaPrzedmiotowDto? SiatkaStacjonarne { get; set; }
    private SiatkaPrzedmiotowDto? SiatkaNiestacjonarne { get; set; }
    private string MetodyWyklad = "";
    private string MetodyCwiczenia = "";
    private string MetodyInneOpis = "";
    private string? ErrorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Token i uprawnienia
            var token = await JS.InvokeAsync<string>("localStorage.getItem", "authToken");

            if (string.IsNullOrWhiteSpace(token) || IsTokenExpired(token))
            {
                await JS.InvokeVoidAsync("localStorage.clear");
                Navigation.NavigateTo("/login", true);
                return;
            }

            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
            var handler = new JwtSecurityTokenHandler();
            var jwt = handler.ReadJwtToken(token);

            var role = jwt.Claims.FirstOrDefault(c =>
                c.Type == ClaimTypes.Role || c.Type == "role" ||
                c.Type == "http://schemas.microsoft.com/ws/2008/06/identity/claims/role")?.Value;

            var userIdStr = jwt.Claims.FirstOrDefault(c => c.Type == "sub")?.Value;

            if (role != "wykladowca" || !int.TryParse(userIdStr, out var userId))
            {
                Navigation.NavigateTo("/brak-dostepu");
                return;
            }

            // Sprawdzenie koordynatora
            var isKoordynator = await Http.GetFromJsonAsync<bool>($"api/sylabusy/{Id}/czy-koordynator/{userId}");
            if (!isKoordynator)
            {
                Navigation.NavigateTo("/brak-dostepu");
                return;
            }

            // Pobranie danych sylabusa
            Sylabus = await Http.GetFromJsonAsync<SylabusDto>($"api/sylabusy/{Id}");
            var siatkiStacjonarne = await Http.GetFromJsonAsync<List<SiatkaPrzedmiotowDto>>(
                $"api/siatka/przedmiot/{Sylabus.PrzedmiotId}/typ/stacjonarne");

            var siatkiNiestacjonarne = await Http.GetFromJsonAsync<List<SiatkaPrzedmiotowDto>>(
                $"api/siatka/przedmiot/{Sylabus.PrzedmiotId}/typ/niestacjonarne");
            SiatkaStacjonarne = siatkiStacjonarne?.FirstOrDefault();
            SiatkaNiestacjonarne = siatkiNiestacjonarne?.FirstOrDefault();
            if (Sylabus == null)
            {
                await JS.InvokeVoidAsync("alert", "Nie udało się pobrać danych sylabusa.");
                return;
            }

            if (SiatkaStacjonarne == null || SiatkaNiestacjonarne == null)
            {
                Console.WriteLine("⚠ Nie znaleziono siatki dla tego przedmiotu.");
            }
            

            // Inicjalizacja FormyZajec
            FormyZajec = new List<FormaZajecViewModel>
        {
            new() { Nazwa = "Wykład" },
            new() { Nazwa = "Ćwiczenia" },
            new() { Nazwa = "Konwersatorium" },
            new() { Nazwa = "Laboratorium" },
            new() { Nazwa = "Warsztaty" },
            new() { Nazwa = "Projekt" },
            new() { Nazwa = "Seminarium" },
            new() { Nazwa = "Konsultacje" },
            new() { Nazwa = "Egzaminy" },
            new() { Nazwa = "SumaGodzin" }
        };

            // Przypisz godziny z siatki
            if (SiatkaStacjonarne != null && SiatkaNiestacjonarne != null)
            {
                foreach (var forma in FormyZajec)
                {
                    forma.GodzinyStacjonarne = forma.Nazwa switch
                    {
                        "Wykład" => SiatkaStacjonarne.Wyklad,
                        "Ćwiczenia" => SiatkaStacjonarne.Cwiczenia,
                        "Konwersatorium" => SiatkaStacjonarne.Konwersatorium,
                        "Laboratorium" => SiatkaStacjonarne.Laboratorium,
                        "Warsztaty" => SiatkaStacjonarne.Warsztaty,
                        "Projekt" => SiatkaStacjonarne.Projekt,
                        "Seminarium" => SiatkaStacjonarne.Seminarium,
                        "Konsultacje" => SiatkaStacjonarne.Konsultacje,
                        "Egzaminy" => SiatkaStacjonarne.Egzaminy,
                        "SumaGodzin" => SiatkaStacjonarne.SumaGodzin,

                        _ => null
                    };

                    forma.GodzinyNiestacjonarne = forma.Nazwa switch
                    {
                        "Wykład" => SiatkaNiestacjonarne.Wyklad,
                        "Ćwiczenia" => SiatkaNiestacjonarne.Cwiczenia,
                        "Konwersatorium" => SiatkaNiestacjonarne.Konwersatorium,
                        "Laboratorium" => SiatkaNiestacjonarne.Laboratorium,
                        "Warsztaty" => SiatkaNiestacjonarne.Warsztaty,
                        "Projekt" => SiatkaNiestacjonarne.Projekt,
                        "Seminarium" => SiatkaNiestacjonarne.Seminarium,
                        "Konsultacje" => SiatkaNiestacjonarne.Konsultacje,
                        "Egzaminy" => SiatkaNiestacjonarne.Egzaminy,
                        "SumaGodzin" => SiatkaNiestacjonarne.SumaGodzin,
                        _ => null
                    };
                }
            }




        Model = new UpdateSylabusRequest
            {
                RokData = Sylabus.RokData,
                WymaganiaWstepne = Sylabus.WymaganiaWstepne,
                ProfilKsztalcenia = Sylabus.ProfilKsztalcenia,
                NazwaJednostkiOrganizacyjnej = Sylabus.NazwaJednostkiOrganizacyjnej,
                NazwaSpecjalnosci = Sylabus.NazwaSpecjalnosci,
                RodzajModuluKsztalcenia = Sylabus.RodzajModuluKsztalcenia,
            };

        var tresci = Sylabus.TresciKsztalcenia as JsonObject ?? new JsonObject();
        Wyklady = tresci["wyklady"]?.AsArray().Select(ParseTresc).ToList() ?? new();
        Cwiczenia = tresci["cwiczenia"]?.AsArray().Select(ParseTresc).ToList() ?? new();

        var efekty = Sylabus.EfektyKsztalcenia?.AsArray() ?? new JsonArray();
        EfektyWiedza = efekty
            .Where(e => e?["rodzaj"]?.ToString() == "wiedza")
            .Select(ParseEfekt).ToList();
        EfektyUmiejetnosci = efekty
            .Where(e => e?["rodzaj"]?.ToString() == "umiejetnosci")
            .Select(ParseEfekt).ToList();
        EfektyKompetencje = efekty
            .Where(e => e?["rodzaj"]?.ToString() == "kompetencje spoleczne")
            .Select(ParseEfekt).ToList();

        var metody = Sylabus.MetodyWeryfikacji?.AsArray() ?? new JsonArray();
        MetodyWeryfikacjiWiedza = metody
            .Where(m => m?["rodzaj"]?.ToString() == "wiedza")
            .Select(ParseMetoda).ToList();
        MetodyWeryfikacjiUmiejetnosci = metody
            .Where(m => m?["rodzaj"]?.ToString() == "umiejetnosci")
            .Select(ParseMetoda).ToList();
        MetodyWeryfikacjiKompetencje = metody
            .Where(m => m?["rodzaj"]?.ToString() == "kompetencje_spoleczne")
            .Select(ParseMetoda).ToList();

        var kryteria = Sylabus.KryteriaOceny?.AsArray() ?? new JsonArray();
        KryteriaOceny = kryteria.Select(ParseKryterium).ToList();

        var naklad = Sylabus.NakladPracy as JsonObject ?? new JsonObject();
        NakladPracy = NakladKeys.Select(k => new NakladPracyViewModel
            {
                Klucz = k.Klucz,
                Label = k.Label,
                Stacjonarne = naklad.TryGetPropertyValue($"{k.Klucz}_S", out var s) ? (int?)s : null,
                Niestacjonarne = naklad.TryGetPropertyValue($"{k.Klucz}_N", out var n) ? (int?)n : null
            }).ToList();

        var lit = Sylabus.Literatura as JsonObject ?? new JsonObject();
        LiteraturaPodstawowa = lit["podstawowa"]?.AsArray().Select(x => x.ToString()).ToList() ?? new();
        LiteraturaUzupelniajaca = lit["uzupelniajaca"]?.AsArray().Select(x => x.ToString()).ToList() ?? new();
        LiteraturaInne = lit["inne"]?.AsArray().Select(x => x.ToString()).ToList() ?? new();

        var metodyrealizacji = Sylabus.MetodyRealizacji as JsonObject ?? new JsonObject();
        MetodyWyklad = metodyrealizacji["wyklad_opis"]?.ToString() ?? "";
        MetodyCwiczenia = metodyrealizacji["cwiczenia_opis"]?.ToString() ?? "";
        MetodyInneOpis = metodyrealizacji["inne_materialy_dydaktyczne"]?.ToString() ?? "";

        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ Błąd: {ex.Message}\n{ex.StackTrace}");
            await JS.InvokeVoidAsync("alert", $"Wystąpił błąd: {ex.Message}");
        }
        

        // 4. Załaduj dane do tabeli form zajęć dydaktycznych
        





    }

    private bool IsTokenExpired(string token)
    {
        try
        {
            var parts = token.Split('.');
            if (parts.Length != 3) return true;

            var payloadJson = Encoding.UTF8.GetString(Convert.FromBase64String(PadBase64(parts[1])));
            var payload = JsonDocument.Parse(payloadJson);
            var expUnix = payload.RootElement.GetProperty("exp").GetInt64();
            var exp = DateTimeOffset.FromUnixTimeSeconds(expUnix).UtcDateTime;

            return DateTime.UtcNow > exp;
        }
        catch
        {
            return true;
        }
    }

    private string PadBase64(string base64)
    {
        return base64.PadRight(base64.Length + (4 - base64.Length % 4) % 4, '=');
    }

    private async Task HandleSubmit()
    {
        if (Model is null) return;

        // walidacja godzin 
        
        int sumaStacjonarne = FormyZajec
            .Where(f => f.Nazwa != "SumaGodzin")
            .Sum(f => f.GodzinyStacjonarne ?? 0);
        int sumaNiestacjonarne = FormyZajec
            .Where(f => f.Nazwa != "SumaGodzin")
            .Sum(f => f.GodzinyNiestacjonarne ?? 0);

        int oczekiwanaStacjonarne = FormyZajec.FirstOrDefault(f => f.Nazwa == "SumaGodzin")?.GodzinyStacjonarne ?? 0;
        int oczekiwanaNiestacjonarne = FormyZajec.FirstOrDefault(f => f.Nazwa == "SumaGodzin")?.GodzinyNiestacjonarne ?? 0;

        if (FormyZajec.Any(f => f.GodzinyStacjonarne < 0 || f.GodzinyNiestacjonarne < 0))
        {
            ErrorMessage = "Błąd: godziny zajęć dydaktycznych nie mogą być ujemne.";
            return;
        }

        if (sumaStacjonarne != oczekiwanaStacjonarne || sumaNiestacjonarne != oczekiwanaNiestacjonarne)
        {
            ErrorMessage = $"Błąd: suma godzin dla zajęć dydaktycznych nie zgadza się z wartością w polu „Suma godzin”. " +
                           $"Stacjonarne: {sumaStacjonarne} (oczekiwano {oczekiwanaStacjonarne}), " +
                           $"Niestacjonarne: {sumaNiestacjonarne} (oczekiwano {oczekiwanaNiestacjonarne})";
            return;
        }

        


        var tresciObj = new JsonObject
            {
                ["wyklady"] = new JsonArray(Wyklady.Select(x => x.ToJson()).ToArray()),
                ["cwiczenia"] = new JsonArray(Cwiczenia.Select(x => x.ToJson()).ToArray())
            };

        var efektyJson = new JsonArray(
            EfektyWiedza.Select(e => { e.Rodzaj = "wiedza"; return e.ToJson(); })
                .Concat(EfektyUmiejetnosci.Select(e => { e.Rodzaj = "umiejetnosci"; return e.ToJson(); }))
                .Concat(EfektyKompetencje.Select(e => { e.Rodzaj = "kompetencje spoleczne"; return e.ToJson(); }))
                .ToArray());

        var metodyJson = new JsonArray(
            MetodyWeryfikacjiWiedza.Select(m => { m.Rodzaj = "wiedza"; return m.ToJson(); })
                .Concat(MetodyWeryfikacjiUmiejetnosci.Select(m => { m.Rodzaj = "umiejetnosci"; return m.ToJson(); }))
                .Concat(MetodyWeryfikacjiKompetencje.Select(m => { m.Rodzaj = "kompetencje_spoleczne"; return m.ToJson(); }))
                .ToArray());


        var nakladObj = new JsonObject();

        foreach (var item in NakladPracy)
        {
            nakladObj[$"{item.Klucz}_S"] = item.Stacjonarne ?? 0;
            nakladObj[$"{item.Klucz}_N"] = item.Niestacjonarne ?? 0;
        }

        var litObj = new JsonObject
            {
                ["podstawowa"] = new JsonArray(LiteraturaPodstawowa.Select(x => (JsonNode)x).ToArray()),
                ["uzupelniajaca"] = new JsonArray(LiteraturaUzupelniajaca.Select(x => (JsonNode)x).ToArray()),
                ["inne"] = new JsonArray(LiteraturaInne.Select(x => (JsonNode)x).ToArray())
            };


        var metodyObj = new JsonObject
            {
                ["wyklad_opis"] = MetodyWyklad,
                ["cwiczenia_opis"] = MetodyCwiczenia,
                ["inne_materialy_dydaktyczne"] = MetodyInneOpis
            };

        Model.TresciKsztalcenia = tresciObj;
        Model.EfektyKsztalcenia = efektyJson;
        Model.MetodyWeryfikacji = metodyJson;
        Model.KryteriaOceny = new JsonArray(
            KryteriaOceny.Select(k => k.ToJson()).ToArray()
        );
        Model.NakladPracy = nakladObj;
        Model.Literatura = litObj;
        Model.MetodyRealizacji = metodyObj;

        // Po zapisaniu sylabusa
        await Http.PutAsJsonAsync($"api/siatka/{SiatkaStacjonarne!.Id}", new
        {
            Wyklad = FormyZajec.First(f => f.Nazwa == "Wykład").GodzinyStacjonarne ?? 0,
            Cwiczenia = FormyZajec.First(f => f.Nazwa == "Ćwiczenia").GodzinyStacjonarne ?? 0,
            Konwersatorium = FormyZajec.First(f => f.Nazwa == "Konwersatorium").GodzinyStacjonarne ?? 0,
            Laboratorium = FormyZajec.First(f => f.Nazwa == "Laboratorium").GodzinyStacjonarne ?? 0,
            Warsztaty = FormyZajec.First(f => f.Nazwa == "Warsztaty").GodzinyStacjonarne ?? 0,
            Projekt = FormyZajec.First(f => f.Nazwa == "Projekt").GodzinyStacjonarne ?? 0,
            Seminarium = FormyZajec.First(f => f.Nazwa == "Seminarium").GodzinyStacjonarne ?? 0,
            Konsultacje = FormyZajec.First(f => f.Nazwa == "Konsultacje").GodzinyStacjonarne ?? 0,
            Egzaminy = FormyZajec.First(f => f.Nazwa == "Egzaminy").GodzinyStacjonarne ?? 0
        });

        await Http.PutAsJsonAsync($"api/siatka/{SiatkaNiestacjonarne!.Id}", new
        {
            Wyklad = FormyZajec.First(f => f.Nazwa == "Wykład").GodzinyNiestacjonarne ?? 0,
            Cwiczenia = FormyZajec.First(f => f.Nazwa == "Ćwiczenia").GodzinyNiestacjonarne ?? 0,
            Konwersatorium = FormyZajec.First(f => f.Nazwa == "Konwersatorium").GodzinyNiestacjonarne ?? 0,
            Laboratorium = FormyZajec.First(f => f.Nazwa == "Laboratorium").GodzinyNiestacjonarne ?? 0,
            Warsztaty = FormyZajec.First(f => f.Nazwa == "Warsztaty").GodzinyNiestacjonarne ?? 0,
            Projekt = FormyZajec.First(f => f.Nazwa == "Projekt").GodzinyNiestacjonarne ?? 0,
            Seminarium = FormyZajec.First(f => f.Nazwa == "Seminarium").GodzinyNiestacjonarne ?? 0,
            Konsultacje = FormyZajec.First(f => f.Nazwa == "Konsultacje").GodzinyNiestacjonarne ?? 0,
            Egzaminy = FormyZajec.First(f => f.Nazwa == "Egzaminy").GodzinyNiestacjonarne ?? 0
        });

        var response = await Http.PutAsJsonAsync($"api/sylabusy/{Id}", Model);
        if (response.IsSuccessStatusCode)
        {
            Navigation.NavigateTo($"/przedmiot/{Sylabus!.PrzedmiotId}");
        }
        else 
        {
            var error = await response.Content.ReadAsStringAsync();
            Console.Error.WriteLine($"Błąd zapisu sylabusu: {error}");
            ErrorMessage = $"Błąd serwera: {error}";
        }
        
    }

    private static TrescViewModel ParseTresc(JsonNode node) => new()
        {
            Lp = node?["lp"]?.ToString() ?? "",
            Opis = node?["opis"]?.ToString() ?? "",
            OdniesienieRaw = string.Join(", ", node?["odniesienie"]?.AsArray()?.Select(x => x.ToString()) ?? Enumerable.Empty<string>())
        };

    private class TrescViewModel
    {
        public string Lp { get; set; } = "";
        public string Opis { get; set; } = "";
        public string OdniesienieRaw { get; set; } = "";

        public JsonObject ToJson() => new()
            {
                ["lp"] = Lp,
                ["opis"] = Opis,
                ["odniesienie"] = new JsonArray(OdniesienieRaw
                        .Split(",", StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries)
                        .Select(x => (JsonNode)x).ToArray())
            };
    }


    private class EfektViewModel
    {
        public string Lp { get; set; } = "";
        public string Opis { get; set; } = "";
        public string OdniesienieRaw { get; set; } = "";
        public string Rodzaj { get; set; } = "";

        public JsonObject ToJson() => new()
            {
                ["lp"] = Lp,
                ["opis"] = Opis,
                ["rodzaj"] = Rodzaj,
                ["odniesienie"] = new JsonArray(
                    OdniesienieRaw
                        .Split(",", StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries)
                        .Select(x => (JsonNode)x).ToArray())
            };
    }

    private static EfektViewModel ParseEfekt(JsonNode node) => new()
        {
            Lp = node?["lp"]?.ToString() ?? "",
            Opis = node?["opis"]?.ToString() ?? "",
            Rodzaj = node?["rodzaj"]?.ToString() ?? "",
            OdniesienieRaw = string.Join(", ", node?["odniesienie"]?.AsArray()?.Select(x => x.ToString()) ?? Enumerable.Empty<string>())
        };


    private class MetodaViewModel
    {
        public string Lp { get; set; } = "";
        public string Opis { get; set; } = "";
        public string FormaZajec { get; set; } = "";
        public string Rodzaj { get; set; } = "";

        public JsonObject ToJson() => new()
            {
                ["lp"] = Lp,
                ["opis"] = Opis,
                ["forma_zajec"] = FormaZajec,
                ["rodzaj"] = Rodzaj
            };
    }

    private static MetodaViewModel ParseMetoda(JsonNode node) => new()
        {
            Lp = node?["lp"]?.ToString() ?? "",
            Opis = node?["opis"]?.ToString() ?? "",
            FormaZajec = node?["forma_zajec"]?.ToString() ?? "",
            Rodzaj = node?["rodzaj"]?.ToString() ?? ""
        };

    private class KryteriumOcenyViewModel
    {
        public string Lp { get; set; } = "";
        public string Ocena2 { get; set; } = "";
        public string Ocena3 { get; set; } = "";
        public string Ocena4 { get; set; } = "";
        public string Ocena5 { get; set; } = "";

        public JsonObject ToJson() => new()
            {
                ["lp"] = Lp,
                ["ocena2"] = Ocena2,
                ["ocena3"] = Ocena3,
                ["ocena4"] = Ocena4,
                ["ocena5"] = Ocena5
            };
    }

    private static KryteriumOcenyViewModel ParseKryterium(JsonNode node) => new()
        {
            Lp = node?["lp"]?.ToString() ?? "",
            Ocena2 = node?["ocena2"]?.ToString() ?? "",
            Ocena3 = node?["ocena3"]?.ToString() ?? "",
            Ocena4 = node?["ocena4"]?.ToString() ?? "",
            Ocena5 = node?["ocena5"]?.ToString() ?? ""
        };


    private class NakladPracyViewModel
    {
        public string Klucz { get; set; } = "";
        public string Label { get; set; } = "";
        public int? Stacjonarne { get; set; }
        public int? Niestacjonarne { get; set; }
    }

    private static readonly (string Klucz, string Label)[] NakladKeys = new[]
    {
        ("zajecia", "Udział w zajęciach dydaktycznych (wykłady, ćwiczenia, projekt itd.) – SUMA godzin"),
        ("konsultacje", "Udział w konsultacjach"),
        ("projekt", "Projekt / esej"),
        ("sam_przygotowanie", "Samodzielne przygotowanie się do zajęć dydaktycznych"),
        ("zaliczenia", "Przygotowanie się do zaliczenia zajęć dydaktycznych"),
        ("sumaryczne", "Sumaryczne obciążenie pracą studenta (25h = 1 ECTS)"),
        ("kontakt", "Zajęcia z bezpośrednim kontaktem z nauczycielem"),
        ("praktyczne", "Zajęcia o charakterze praktycznym"),
        ("zawodowe", "Zajęcia związane z przygotowaniem zawodowym"),
        ("badania", "Zajęcia związane z przygotowaniem do badań")
    };


    private void AddWyklad()
    {
        var nextLp = (Wyklady.Count + 1).ToString();
        Wyklady.Add(new TrescViewModel { Lp = nextLp });
    }

    private void AddCwiczenie()
    {
        var nextLp = (Cwiczenia.Count + 1).ToString();
        Cwiczenia.Add(new TrescViewModel { Lp = nextLp });
    }

    private void UpdateLp(List<TrescViewModel> lista)
    {
        for (int i = 0; i < lista.Count; i++)
        {
            lista[i].Lp = (i + 1).ToString();
        }
    }

    private void AddEfektWiedza()
    {
        EfektyWiedza.Add(new EfektViewModel { Lp = "", Opis = "", OdniesienieRaw = "", Rodzaj = "wiedza" });
    }

    private void AddEfektUmiejetnosc()
    {
        EfektyUmiejetnosci.Add(new EfektViewModel { Lp = "", Opis = "", OdniesienieRaw = "", Rodzaj = "umiejetnosci" });
    }

    private void AddEfektKompetencja()
    {
        EfektyKompetencje.Add(new EfektViewModel { Lp = "", Opis = "", OdniesienieRaw = "", Rodzaj = "kompetencje spoleczne" });
    }

    private void AddMetodaWeryfikacjiWiedza()
    {
        MetodyWeryfikacjiWiedza.Add(new MetodaViewModel
        {
            Lp = $"M_W{MetodyWeryfikacjiWiedza.Count + 1:00}",
            Opis = "",
            FormaZajec = "",
            Rodzaj = "wiedza"
        });
    }

    private void AddMetodaWeryfikacjiUmiejetnosc()
    {
        MetodyWeryfikacjiUmiejetnosci.Add(new MetodaViewModel
        {
            Lp = $"M_U{MetodyWeryfikacjiUmiejetnosci.Count + 1:00}",
            Opis = "",
            FormaZajec = "",
            Rodzaj = "umiejetnosci"
        });
    }

    private void AddMetodaWeryfikacjiKompetencja()
    {
        MetodyWeryfikacjiKompetencje.Add(new MetodaViewModel
        {
            Lp = $"M_K{MetodyWeryfikacjiKompetencje.Count + 1:00}",
            Opis = "",
            FormaZajec = "",
            Rodzaj = "kompetencje_spoleczne"
        });
    }

    private void AddKryteriumOceny()
    {
        KryteriaOceny.Add(new KryteriumOcenyViewModel
        {
            Lp = "",
            Ocena2 = "",
            Ocena3 = "",
            Ocena4 = "",
            Ocena5 = ""
        });
    }

    private void AddLiteraturaPodstawowa()
    {
        LiteraturaPodstawowa.Add(string.Empty);
    }

    private void AddLiteraturaUzupelniajaca()
    {
        LiteraturaUzupelniajaca.Add(string.Empty);
    }

    private void AddLiteraturaInne()
    {
        LiteraturaInne.Add(string.Empty);
    }

    private List<FormaZajecViewModel> FormyZajec = new()
    {
        new() { Nazwa = "Wykład" },
        new() { Nazwa = "Ćwiczenia" },
        new() { Nazwa = "Konwersatorium" },
        new() { Nazwa = "Laboratorium" },
        new() { Nazwa = "Warsztaty" },
        new() { Nazwa = "Projekt" },
        new() { Nazwa = "Seminarium" },
        new() { Nazwa = "Konsultacje" },
        new() { Nazwa = "Egzaminy" },
        new() { Nazwa = "SumaGodzin" }

    };

    private class FormaZajecViewModel
    {
        public string Nazwa { get; set; }
        public int? GodzinyStacjonarne { get; set; }
        public int? GodzinyNiestacjonarne { get; set; }
    }


}
