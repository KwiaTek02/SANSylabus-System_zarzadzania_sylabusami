@using Frontend.Services
@inherits LayoutComponentBase
@inject IJSRuntime JS
@inject NavigationManager Navigation
@inject HttpClient Http
@inject AuthState AuthState

<header class="main-header">
    <div class="header-content">
        <div class="brand">
            <img src="images/san-logo.png" alt="SAN Logo" class="logo" />
            <span class="brand-name">Społeczna Akademia Nauk</span>
        </div>

        <div class="auth-buttons">
            @if (IsLoggedIn)
            {
                <span class="user-info">👤 @FullName</span>
                <button class="btn btn-logout" @onclick="Logout">Wyloguj</button>
            }
            else
            {
                <a href="@($"/login?returnUrl={Uri.EscapeDataString(Navigation.Uri)}")" class="btn btn-outline-light me-2">Zaloguj się</a>
                <a href="/register" class="btn btn-register">Rejestracja</a>
            }
        </div>
    </div>
</header>

<nav class="main-nav">
    <a href="/kierunki">Sylabusy</a>
    <a href="#">Student</a>
    <a href="#">Nauka i Badania</a>
    <a href="#">Współpraca</a>
    <a href="#">Kontakt</a>
</nav>

<div class="main-content px-4 py-4">
    @Body
</div>

@code {
    private string? Login;
    private string? FullName;
    private bool IsLoggedIn;

    protected override async Task OnInitializedAsync()
    {
        AuthState.OnChange += async () =>
        {
            await LoadUserInfo();
            StateHasChanged();
        };

        await LoadUserInfo();
    }

    private async Task LoadUserInfo()
    {
        var token = await JS.InvokeAsync<string>("localStorage.getItem", "authToken");

        if (!string.IsNullOrWhiteSpace(token))
        {
            Login = ExtractLoginFromToken(token);
            IsLoggedIn = !string.IsNullOrWhiteSpace(Login);

            if (IsLoggedIn)
            {
                try
                {
                    FullName = await Http.GetStringAsync($"/api/uzytkownicy/nazwisko?login={Uri.EscapeDataString(Login)}");
                }
                catch
                {
                    FullName = Login;
                }
            }
        }
        else
        {
            IsLoggedIn = false;
            Login = null;
            FullName = null;
        }
    }

    private async Task Logout()
    {
        await JS.InvokeVoidAsync("localStorage.removeItem", "authToken");
        await JS.InvokeVoidAsync("localStorage.removeItem", "authUser");
        Navigation.NavigateTo("/login", true);
    }

    private string? ExtractLoginFromToken(string token)
    {
        try
        {
            var parts = token.Split('.');
            if (parts.Length != 3)
                return null;

            var payload = System.Text.Json.JsonDocument.Parse(
                System.Text.Encoding.UTF8.GetString(Convert.FromBase64String(AddPadding(parts[1]))));

            return payload.RootElement.TryGetProperty("login", out var loginProp)
                ? loginProp.GetString()
                : null;
        }
        catch
        {
            return null;
        }
    }

    private string AddPadding(string base64)
    {
        return base64.PadRight(base64.Length + (4 - base64.Length % 4) % 4, '=');
    }
}
